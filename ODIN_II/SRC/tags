!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACTIVATION	types.h	82;"	d
ACTIVATION_ERROR	types.h	65;"	d
ACT_NUM_ITER	activity_estimation.c	40;"	d	file:
ADD	types.h	/^	ADD, \/\/ +$/;"	e	enum:__anon16
ADDER_FUNC	types.h	/^	ADDER_FUNC,$/;"	e	enum:__anon16
ADDER_FUNC_string	node_creation_library.c	/^char *ADDER_FUNC_string = "ADDER_FUNC";$/;"	v
ADD_string	node_creation_library.c	/^char *ADD_string = "ADD"; $/;"	v
ALIAS_INPUTS	netlist_create_from_ast.c	50;"	d	file:
ALWAYS	types.h	/^	ALWAYS,$/;"	e	enum:__anon17
ARRAY_REF	types.h	/^	ARRAY_REF, $/;"	e	enum:__anon17
ASSIGN	types.h	/^	ASSIGN,$/;"	e	enum:__anon17
AST_TYPES_H	types.h	167;"	d
Arch	odin_ii.c	/^t_arch Arch;$/;"	v
BEGIN	verilog_flex.c	125;"	d	file:
BIN	types.h	/^	BIN,$/;"	e	enum:__anon15
BINARY_OPERATION	types.h	/^	BINARY_OPERATION, $/;"	e	enum:__anon17
BITWISE_AND	types.h	/^	BITWISE_AND, \/\/ & $/;"	e	enum:__anon16
BITWISE_AND_string	node_creation_library.c	/^char *BITWISE_AND_string = "BITWISE_AND"; $/;"	v
BITWISE_NAND	types.h	/^	BITWISE_NAND, \/\/ ~&$/;"	e	enum:__anon16
BITWISE_NAND_string	node_creation_library.c	/^char *BITWISE_NAND_string = "BITWISE_NAND"; $/;"	v
BITWISE_NOR	types.h	/^	BITWISE_NOR, \/\/ ~| $/;"	e	enum:__anon16
BITWISE_NOR_string	node_creation_library.c	/^char *BITWISE_NOR_string = "BITWISE_NOR"; $/;"	v
BITWISE_NOT	types.h	/^	BITWISE_NOT, \/\/ ~	$/;"	e	enum:__anon16
BITWISE_NOT_string	node_creation_library.c	/^char *BITWISE_NOT_string = "BITWISE_NOT"; $/;"	v
BITWISE_OR	types.h	/^	BITWISE_OR, \/\/ |$/;"	e	enum:__anon16
BITWISE_OR_string	node_creation_library.c	/^char *BITWISE_OR_string = "BITWISE_OR"; $/;"	v
BITWISE_XNOR	types.h	/^	BITWISE_XNOR, \/\/ ~^ $/;"	e	enum:__anon16
BITWISE_XNOR_string	node_creation_library.c	/^char *BITWISE_XNOR_string = "BITWISE_XNOR"; $/;"	v
BITWISE_XOR	types.h	/^	BITWISE_XOR, \/\/ ^$/;"	e	enum:__anon16
BITWISE_XOR_string	node_creation_library.c	/^char *BITWISE_XOR_string = "BITWISE_XOR"; $/;"	v
BLIF_ERROR	types.h	61;"	d
BLIF_FUNCTION	types.h	/^	BLIF_FUNCTION,$/;"	e	enum:__anon16
BLIF_ONE_STRING	read_blif.c	/^char *BLIF_ONE_STRING    = "ONE_VCC_CNS";$/;"	v
BLIF_PAD_STRING	read_blif.c	/^char *BLIF_PAD_STRING    = "ZERO_PAD_ZERO";$/;"	v
BLIF_ZERO_STRING	read_blif.c	/^char *BLIF_ZERO_STRING   = "ZERO_GND_ZERO";$/;"	v
BLOCK	types.h	/^	BLOCK, $/;"	e	enum:__anon17
BLOCKING_STATEMENT	types.h	/^	BLOCKING_STATEMENT,$/;"	e	enum:__anon17
BUFFER_MAX_SIZE	simulate_blif.h	34;"	d
BUF_NODE	types.h	/^	BUF_NODE,$/;"	e	enum:__anon16
BUF_NODE_string	node_creation_library.c	/^char *BUF_NODE_string = "BUF_NODE"; $/;"	v
CARRY_FUNC	types.h	/^	CARRY_FUNC,$/;"	e	enum:__anon16
CARRY_FUNC_string	node_creation_library.c	/^char *CARRY_FUNC_string = "CARRY_FUNC";$/;"	v
CASE	types.h	/^	CASE,$/;"	e	enum:__anon17
CASE_DEFAULT	types.h	/^	CASE_DEFAULT,$/;"	e	enum:__anon17
CASE_EQUAL	types.h	/^	CASE_EQUAL, \/\/ ===$/;"	e	enum:__anon16
CASE_EQUAL_string	node_creation_library.c	/^char *CASE_EQUAL_string = "CASE_EQUAL"; $/;"	v
CASE_ITEM	types.h	/^	CASE_ITEM,$/;"	e	enum:__anon17
CASE_LIST	types.h	/^	CASE_LIST,$/;"	e	enum:__anon17
CASE_NOT_EQUAL	types.h	/^	CASE_NOT_EQUAL, \/\/ !==$/;"	e	enum:__anon16
CASE_NOT_EQUAL_string	node_creation_library.c	/^char *CASE_NOT_EQUAL_string = "CASE_NOT_EQUAL";$/;"	v
CLOCK_NODE	types.h	/^	CLOCK_NODE,$/;"	e	enum:__anon16
CLOCK_NODE_string	node_creation_library.c	/^char *CLOCK_NODE_string = "CLOCK_NODE"; $/;"	v
COMBINATIONAL	netlist_create_from_ast.c	52;"	d	file:
COMBO_LOOP	types.h	73;"	d
COMBO_LOOP_ERROR	types.h	74;"	d
COMMENT	verilog_flex.c	668;"	d	file:
CONCATENATE	types.h	/^	CONCATENATE,$/;"	e	enum:__anon17
COUNT_NODES	types.h	72;"	d
DEC	types.h	/^	DEC,$/;"	e	enum:__anon15
DEFAULT_CLOCK_NAME	read_blif.c	/^char *DEFAULT_CLOCK_NAME = "top^clock";$/;"	v
DEFAULT_STATIC_PROBABILITY	activity_estimation.c	37;"	d	file:
DEFAULT_TRANSITION_DENSITY	activity_estimation.c	38;"	d	file:
DELAY_CONTROL	types.h	/^	DELAY_CONTROL,$/;"	e	enum:__anon17
DIVIDE	types.h	/^	DIVIDE, \/\/ \/$/;"	e	enum:__anon16
DIVIDE_string	node_creation_library.c	/^char *DIVIDE_string = "DIVIDE"; $/;"	v
DRIVEN	read_netlist.c	/^enum pass { DRIVERS = 0, DRIVEN, STOP };$/;"	e	enum:pass	file:
DRIVERS	read_netlist.c	/^enum pass { DRIVERS = 0, DRIVEN, STOP };$/;"	e	enum:pass	file:
DUAL_PORT_MEMORY_NAME	simulate_blif.h	59;"	d
DefaultSize	verilog_preprocessor.h	4;"	d
ECHO	verilog_flex.c	755;"	d	file:
EOB_ACT_CONTINUE_SCAN	verilog_flex.c	160;"	d	file:
EOB_ACT_END_OF_FILE	verilog_flex.c	161;"	d	file:
EOB_ACT_LAST_MATCH	verilog_flex.c	162;"	d	file:
FALSE	types.h	33;"	d
FF_NODE	types.h	/^	FF_NODE,$/;"	e	enum:__anon16
FF_NODE_string	node_creation_library.c	/^char *FF_NODE_string = "FF_NODE"; $/;"	v
FILE_ITEMS	types.h	/^	FILE_ITEMS,$/;"	e	enum:__anon17
FLEXINT_H	verilog_flex.c	30;"	d	file:
FLEX_BETA	verilog_flex.c	14;"	d	file:
FLEX_SCANNER	verilog_flex.c	9;"	d	file:
GATE	types.h	/^	GATE,$/;"	e	enum:__anon17
GATE_INSTANCE	types.h	/^	GATE_INSTANCE,$/;"	e	enum:__anon17
GENERATE_VECTORS	types.h	/^	GENERATE_VECTORS,$/;"	e	enum:__anon14
GENERIC	types.h	/^	GENERIC \/*added for the unknown node type *\/$/;"	e	enum:__anon16
GLOBALS_H	globals.h	2;"	d
GND_NAME	read_blif.c	40;"	d	file:
GND_NODE	types.h	/^	GND_NODE,$/;"	e	enum:__anon16
GND_NODE_string	node_creation_library.c	/^char *GND_NODE_string = "GND_NODE"; $/;"	v
GRAPH_CRUNCH	types.h	75;"	d
GT	types.h	/^	GT, \/\/ >$/;"	e	enum:__anon16
GTE	types.h	/^	GTE, \/\/ >=$/;"	e	enum:__anon16
GTE_string	node_creation_library.c	/^char *GTE_string = "GTE"; $/;"	v
GT_string	node_creation_library.c	/^char *GT_string = "GT"; $/;"	v
HARD_BLOCK	types.h	/^	HARD_BLOCK, $/;"	e	enum:__anon17
HARD_BLOCKS_H	hard_blocks.h	25;"	d
HARD_BLOCK_CONNECT	types.h	/^	HARD_BLOCK_CONNECT,$/;"	e	enum:__anon17
HARD_BLOCK_CONNECT_LIST	types.h	/^	HARD_BLOCK_CONNECT_LIST,$/;"	e	enum:__anon17
HARD_BLOCK_NAMED_INSTANCE	types.h	/^	HARD_BLOCK_NAMED_INSTANCE, $/;"	e	enum:__anon17
HARD_IP	types.h	/^	HARD_IP, $/;"	e	enum:__anon16
HARD_IP_string	node_creation_library.c	/^char *HARD_IP_string = "HARD_IP";$/;"	v
HASHTABLE_H	hashtable.h	24;"	d
HBPAD_NAME	read_blif.c	42;"	d	file:
HEX	types.h	/^	HEX,$/;"	e	enum:__anon15
IDENTIFIERS	types.h	/^	IDENTIFIERS,$/;"	e	enum:__anon17
IF	types.h	/^	IF,$/;"	e	enum:__anon17
IF_Q	types.h	/^	IF_Q,$/;"	e	enum:__anon17
INITIAL	verilog_flex.c	667;"	d	file:
INOUT	types.h	/^	INOUT,$/;"	e	enum:__anon17
INPAD	read_netlist.c	/^enum special_blk { NORMAL = 0, INPAD, OUTPAD };$/;"	e	enum:special_blk	file:
INPUT	types.h	/^	INPUT, $/;"	e	enum:__anon17
INPUT_NODE	types.h	/^	INPUT_NODE,$/;"	e	enum:__anon16
INPUT_NODE_string	node_creation_library.c	/^char *INPUT_NODE_string = "INPUT_NODE"; $/;"	v
INPUT_VECTOR_FILE_NAME	simulate_blif.h	55;"	d
INSTANTIATE_DRIVERS	netlist_create_from_ast.c	49;"	d	file:
INT16_MAX	verilog_flex.c	73;"	d	file:
INT16_MIN	verilog_flex.c	64;"	d	file:
INT32_MAX	verilog_flex.c	76;"	d	file:
INT32_MIN	verilog_flex.c	67;"	d	file:
INT8_MAX	verilog_flex.c	70;"	d	file:
INT8_MIN	verilog_flex.c	61;"	d	file:
LEVELIZE	types.h	81;"	d
LOGICAL_AND	types.h	/^	LOGICAL_AND, \/\/ &&$/;"	e	enum:__anon16
LOGICAL_AND_string	node_creation_library.c	/^char *LOGICAL_AND_string = "LOGICAL_AND"; $/;"	v
LOGICAL_EQUAL	types.h	/^	LOGICAL_EQUAL, \/\/ == $/;"	e	enum:__anon16
LOGICAL_EQUAL_string	node_creation_library.c	/^char *LOGICAL_EQUAL_string = "LOGICAL_EQUAL"; $/;"	v
LOGICAL_NAND	types.h	/^	LOGICAL_NAND, \/\/ No Symbol$/;"	e	enum:__anon16
LOGICAL_NAND_string	node_creation_library.c	/^char *LOGICAL_NAND_string = "LOGICAL_NAND"; $/;"	v
LOGICAL_NOR	types.h	/^	LOGICAL_NOR, \/\/ No Symbol$/;"	e	enum:__anon16
LOGICAL_NOR_string	node_creation_library.c	/^char *LOGICAL_NOR_string = "LOGICAL_NOR"; $/;"	v
LOGICAL_NOT	types.h	/^	LOGICAL_NOT, \/\/ ! $/;"	e	enum:__anon16
LOGICAL_NOT_string	node_creation_library.c	/^char *LOGICAL_NOT_string = "LOGICAL_NOT"; $/;"	v
LOGICAL_OR	types.h	/^	LOGICAL_OR, \/\/ ||$/;"	e	enum:__anon16
LOGICAL_OR_string	node_creation_library.c	/^char *LOGICAL_OR_string = "LOGICAL_OR"; $/;"	v
LOGICAL_XNOR	types.h	/^	LOGICAL_XNOR, \/\/ No symbol$/;"	e	enum:__anon16
LOGICAL_XNOR_string	node_creation_library.c	/^char *LOGICAL_XNOR_string = "LOGICAL_XNOR"; $/;"	v
LOGICAL_XOR	types.h	/^	LOGICAL_XOR, \/\/ No Symbol$/;"	e	enum:__anon16
LOGICAL_XOR_string	node_creation_library.c	/^char *LOGICAL_XOR_string = "LOGICAL_XOR"; $/;"	v
LONG_LONG	types.h	/^	LONG_LONG,$/;"	e	enum:__anon15
LOWER_THAN_ELSE	verilog_bison.c	/^     LOWER_THAN_ELSE = 313$/;"	e	enum:yytokentype	file:
LOWER_THAN_ELSE	verilog_bison.h	/^     LOWER_THAN_ELSE = 313$/;"	e	enum:yytokentype
LT	types.h	/^	LT, \/\/ <$/;"	e	enum:__anon16
LTE	types.h	/^	LTE, \/\/ <=$/;"	e	enum:__anon16
LTE_string	node_creation_library.c	/^char *LTE_string = "LTE"; $/;"	v
LT_string	node_creation_library.c	/^char *LT_string = "LT"; $/;"	v
MAX_BUF	odin_util.h	5;"	d
MEMORIES_H	memories.h	25;"	d
MEMORY	types.h	/^	MEMORY,$/;"	e	enum:__anon16
MEMORY_DEPTH_LIMIT	memories.h	32;"	d
MEMORY_string	node_creation_library.c	/^char *MEMORY_string = "MEMORY";$/;"	v
MINUS	types.h	/^	MINUS, \/\/ -$/;"	e	enum:__anon16
MINUS_string	node_creation_library.c	/^char *MINUS_string = "MINUS"; $/;"	v
MODULE	types.h	/^	MODULE, $/;"	e	enum:__anon17
MODULE_CONNECT	types.h	/^	MODULE_CONNECT,$/;"	e	enum:__anon17
MODULE_CONNECT_LIST	types.h	/^	MODULE_CONNECT_LIST,$/;"	e	enum:__anon17
MODULE_INSTANCE	types.h	/^	MODULE_INSTANCE,$/;"	e	enum:__anon17
MODULE_ITEMS	types.h	/^	MODULE_ITEMS, $/;"	e	enum:__anon17
MODULE_NAMED_INSTANCE	types.h	/^	MODULE_NAMED_INSTANCE,$/;"	e	enum:__anon17
MODULE_PARAMETER	types.h	/^	MODULE_PARAMETER,$/;"	e	enum:__anon17
MODULE_PARAMETER_LIST	types.h	/^	MODULE_PARAMETER_LIST,$/;"	e	enum:__anon17
MODULO	types.h	/^	MODULO, \/\/ %$/;"	e	enum:__anon16
MODULO_string	node_creation_library.c	/^char *MODULO_string = "MODULO"; $/;"	v
MP	verilog_flex.c	662;"	d	file:
MULTIPLIERS_H	multipliers.h	24;"	d
MULTIPLY	types.h	/^	MULTIPLY, \/\/ * $/;"	e	enum:__anon16
MULTIPLY_string	node_creation_library.c	/^char *MULTIPLY_string = "MULTIPLY"; $/;"	v
MULTI_PORT_MUX	types.h	/^	MULTI_PORT_MUX, \/\/ port 1 = control, port 2+ = mux options$/;"	e	enum:__anon16
MULTI_PORT_MUX_string	node_creation_library.c	/^char *MULTI_PORT_MUX_string = "MULTI_PORT_MUX";$/;"	v
MUX_2	types.h	/^	MUX_2,$/;"	e	enum:__anon16
MUX_2_string	node_creation_library.c	/^char *MUX_2_string = "MUX_2";$/;"	v
MaxLine	verilog_preprocessor.h	5;"	d
NEGEDGE	types.h	/^	NEGEDGE, $/;"	e	enum:__anon17
NETLIST_CREATE_FROM_AST_H	netlist_create_from_ast.h	2;"	d
NETLIST_ERROR	types.h	59;"	d
NETLIST_FILE_ERROR	types.h	63;"	d
NETLIST_FUNCTION	types.h	/^	NETLIST_FUNCTION,$/;"	e	enum:__anon16
NETLIST_UTILS_H	types.h	366;"	d
NON_BLOCKING_STATEMENT	types.h	/^	NON_BLOCKING_STATEMENT,$/;"	e	enum:__anon17
NORMAL	read_netlist.c	/^enum special_blk { NORMAL = 0, INPAD, OUTPAD };$/;"	e	enum:special_blk	file:
NOT_EQUAL	types.h	/^	NOT_EQUAL, \/\/ !=$/;"	e	enum:__anon16
NOT_EQUAL_string	node_creation_library.c	/^char *NOT_EQUAL_string = "NOT_EQUAL"; $/;"	v
NO_ID	types.h	/^	NO_ID,$/;"	e	enum:__anon17
NO_OP	types.h	/^	NO_OP,$/;"	e	enum:__anon16
NO_SIMULATION	types.h	/^	NO_SIMULATION = 0,$/;"	e	enum:__anon14
NUMBERS	types.h	/^	NUMBERS, $/;"	e	enum:__anon17
OCT	types.h	/^	OCT,$/;"	e	enum:__anon15
ODIN_UTIL_H	odin_util.h	2;"	d
OUTPAD	read_netlist.c	/^enum special_blk { NORMAL = 0, INPAD, OUTPAD };$/;"	e	enum:special_blk	file:
OUTPUT	types.h	/^	OUTPUT, $/;"	e	enum:__anon17
OUTPUT_BLIF_H	output_blif.h	2;"	d
OUTPUT_NODE	types.h	/^	OUTPUT_NODE,$/;"	e	enum:__anon16
OUTPUT_NODE_string	node_creation_library.c	/^char *OUTPUT_NODE_string = "OUTPUT_NODE"; $/;"	v
OUTPUT_TRAVERSE_VALUE	types.h	71;"	d
OUTPUT_VECTOR_FILE_NAME	simulate_blif.h	56;"	d
PAD_NODE	types.h	/^	PAD_NODE,$/;"	e	enum:__anon16
PARAMETER	types.h	/^	PARAMETER,$/;"	e	enum:__anon17
PARSE	verilog_bison.c	102;"	d	file:
PARSE_ERROR	types.h	57;"	d
PARTIAL_MAP_H	partial_map.h	27;"	d
PARTIAL_MAP_TRAVERSE_VALUE	types.h	70;"	d
PORT	types.h	/^	PORT,$/;"	e	enum:__anon17
POSEDGE	types.h	/^	POSEDGE,$/;"	e	enum:__anon17
QUEUE_H	queue.h	24;"	d
RAM	types.h	/^	RAM$/;"	e	enum:__anon17
RANGE_REF	types.h	/^	RANGE_REF,$/;"	e	enum:__anon17
READ_BLIF_BUFFER	read_blif.c	44;"	d	file:
READ_BLIF_H	read_blif.h	2;"	d
READ_XML_CONFIG_FILE_H	read_xml_config_file.h	27;"	d
REG	types.h	/^	REG,$/;"	e	enum:__anon17
REJECT	verilog_flex.c	624;"	d	file:
RESET	types.h	80;"	d
SEQUENTIAL	netlist_create_from_ast.c	53;"	d	file:
SEQUENTIAL_LEVELIZE	types.h	77;"	d
SIMULATE_BLIF_H	simulate_blif.h	24;"	d
SIMULATION_ERROR	types.h	67;"	d
SIM_WAVE_LENGTH	simulate_blif.h	33;"	d
SINGLE_PORT_MEMORY_NAME	simulate_blif.h	58;"	d
SL	types.h	/^	SL, \/\/ << $/;"	e	enum:__anon16
SL_string	node_creation_library.c	/^char *SL_string = "SL"; $/;"	v
SR	types.h	/^	SR, \/\/ >>$/;"	e	enum:__anon16
SR_string	node_creation_library.c	/^char *SR_string = "SR"; $/;"	v
STATS	types.h	76;"	d
STOP	read_netlist.c	/^enum pass { DRIVERS = 0, DRIVEN, STOP };$/;"	e	enum:pass	file:
STRING_CACHE	string_cache.h	/^} STRING_CACHE;$/;"	t	typeref:struct:__anon13
TEST_EXISTING_VECTORS	types.h	/^	TEST_EXISTING_VECTORS,$/;"	e	enum:__anon14
TOKENS	read_blif.c	39;"	d	file:
TRUE	types.h	30;"	d
TYPES_H	types.h	37;"	d
UADD	verilog_bison.c	/^     UADD = 311,$/;"	e	enum:yytokentype	file:
UADD	verilog_bison.h	/^     UADD = 311,$/;"	e	enum:yytokentype
UAND	verilog_bison.c	/^     UAND = 304,$/;"	e	enum:yytokentype	file:
UAND	verilog_bison.h	/^     UAND = 304,$/;"	e	enum:yytokentype
UINT16_MAX	verilog_flex.c	82;"	d	file:
UINT32_MAX	verilog_flex.c	85;"	d	file:
UINT8_MAX	verilog_flex.c	79;"	d	file:
ULNOT	verilog_bison.c	/^     ULNOT = 310,$/;"	e	enum:yytokentype	file:
ULNOT	verilog_bison.h	/^     ULNOT = 310,$/;"	e	enum:yytokentype
UMINUS	verilog_bison.c	/^     UMINUS = 312,$/;"	e	enum:yytokentype	file:
UMINUS	verilog_bison.h	/^     UMINUS = 312,$/;"	e	enum:yytokentype
UNAND	verilog_bison.c	/^     UNAND = 306,$/;"	e	enum:yytokentype	file:
UNAND	verilog_bison.h	/^     UNAND = 306,$/;"	e	enum:yytokentype
UNARY_OPERATION	types.h	/^	UNARY_OPERATION,$/;"	e	enum:__anon17
UNOR	verilog_bison.c	/^     UNOR = 307,$/;"	e	enum:yytokentype	file:
UNOR	verilog_bison.h	/^     UNOR = 307,$/;"	e	enum:yytokentype
UNOT	verilog_bison.c	/^     UNOT = 305,$/;"	e	enum:yytokentype	file:
UNOT	verilog_bison.h	/^     UNOT = 305,$/;"	e	enum:yytokentype
UOR	verilog_bison.c	/^     UOR = 303,$/;"	e	enum:yytokentype	file:
UOR	verilog_bison.h	/^     UOR = 303,$/;"	e	enum:yytokentype
UXNOR	verilog_bison.c	/^     UXNOR = 308,$/;"	e	enum:yytokentype	file:
UXNOR	verilog_bison.h	/^     UXNOR = 308,$/;"	e	enum:yytokentype
UXOR	verilog_bison.c	/^     UXOR = 309,$/;"	e	enum:yytokentype	file:
UXOR	verilog_bison.h	/^     UXOR = 309,$/;"	e	enum:yytokentype
VAR_DECLARE	types.h	/^	VAR_DECLARE,$/;"	e	enum:__anon17
VAR_DECLARE_LIST	types.h	/^	VAR_DECLARE_LIST,$/;"	e	enum:__anon17
VCC_NAME	read_blif.c	41;"	d	file:
VCC_NODE	types.h	/^	VCC_NODE,$/;"	e	enum:__anon16
VCC_NODE_string	node_creation_library.c	/^char *VCC_NODE_string = "VCC_NODE"; $/;"	v
WIRE	types.h	/^	WIRE,$/;"	e	enum:__anon17
YYABORT	verilog_bison.c	1121;"	d	file:
YYACCEPT	verilog_bison.c	1120;"	d	file:
YYBACKUP	verilog_bison.c	1142;"	d	file:
YYBISON	verilog_bison.c	45;"	d	file:
YYBISON_VERSION	verilog_bison.c	48;"	d	file:
YYCOPY	verilog_bison.c	426;"	d	file:
YYCOPY	verilog_bison.c	429;"	d	file:
YYDEBUG	verilog_bison.c	136;"	d	file:
YYDPRINTF	verilog_bison.c	1222;"	d	file:
YYDPRINTF	verilog_bison.c	1371;"	d	file:
YYEMPTY	verilog_bison.c	1117;"	d	file:
YYEOF	verilog_bison.c	1118;"	d	file:
YYERRCODE	verilog_bison.c	1161;"	d	file:
YYERROR	verilog_bison.c	1122;"	d	file:
YYERROR_VERBOSE	verilog_bison.c	141;"	d	file:
YYERROR_VERBOSE	verilog_bison.c	142;"	d	file:
YYERROR_VERBOSE	verilog_bison.c	144;"	d	file:
YYFAIL	verilog_bison.c	1132;"	d	file:
YYFINAL	verilog_bison.c	459;"	d	file:
YYFPRINTF	verilog_bison.c	1219;"	d	file:
YYFREE	verilog_bison.c	392;"	d	file:
YYID	verilog_bison.c	/^YYID (int yyi)$/;"	f	file:
YYID	verilog_bison.c	316;"	d	file:
YYINITDEPTH	verilog_bison.c	1380;"	d	file:
YYLAST	verilog_bison.c	461;"	d	file:
YYLEX	verilog_bison.c	1209;"	d	file:
YYLEX	verilog_bison.c	1211;"	d	file:
YYLINENO	verilog_bison.c	106;"	d	file:
YYLLOC_DEFAULT	verilog_bison.c	1170;"	d	file:
YYLSP_NEEDED	verilog_bison.c	63;"	d	file:
YYMALLOC	verilog_bison.c	385;"	d	file:
YYMAXDEPTH	verilog_bison.c	1391;"	d	file:
YYMAXUTOK	verilog_bison.c	474;"	d	file:
YYNNTS	verilog_bison.c	466;"	d	file:
YYNRULES	verilog_bison.c	468;"	d	file:
YYNSTATES	verilog_bison.c	470;"	d	file:
YYNTOKENS	verilog_bison.c	464;"	d	file:
YYPACT_NINF	verilog_bison.c	750;"	d	file:
YYPOPSTACK	verilog_bison.c	1731;"	d	file:
YYPULL	verilog_bison.c	60;"	d	file:
YYPURE	verilog_bison.c	54;"	d	file:
YYPUSH	verilog_bison.c	57;"	d	file:
YYRECOVERING	verilog_bison.c	1140;"	d	file:
YYRHSLOC	verilog_bison.c	1168;"	d	file:
YYSIZE_MAXIMUM	verilog_bison.c	293;"	d	file:
YYSIZE_T	verilog_bison.c	281;"	d	file:
YYSIZE_T	verilog_bison.c	283;"	d	file:
YYSIZE_T	verilog_bison.c	287;"	d	file:
YYSIZE_T	verilog_bison.c	289;"	d	file:
YYSKELETON_NAME	verilog_bison.c	51;"	d	file:
YYSTACK_ALLOC	verilog_bison.c	339;"	d	file:
YYSTACK_ALLOC	verilog_bison.c	343;"	d	file:
YYSTACK_ALLOC	verilog_bison.c	348;"	d	file:
YYSTACK_ALLOC	verilog_bison.c	371;"	d	file:
YYSTACK_ALLOC_MAXIMUM	verilog_bison.c	368;"	d	file:
YYSTACK_ALLOC_MAXIMUM	verilog_bison.c	374;"	d	file:
YYSTACK_BYTES	verilog_bison.c	418;"	d	file:
YYSTACK_FREE	verilog_bison.c	362;"	d	file:
YYSTACK_FREE	verilog_bison.c	372;"	d	file:
YYSTACK_GAP_MAXIMUM	verilog_bison.c	414;"	d	file:
YYSTACK_RELOCATE	verilog_bison.c	445;"	d	file:
YYSTATE	verilog_flex.c	132;"	d	file:
YYSTYPE	verilog_bison.c	/^typedef union YYSTYPE$/;"	u	file:
YYSTYPE	verilog_bison.c	/^} YYSTYPE;$/;"	t	typeref:union:YYSTYPE	file:
YYSTYPE	verilog_bison.h	/^typedef union YYSTYPE$/;"	u
YYSTYPE	verilog_bison.h	/^} YYSTYPE;$/;"	t	typeref:union:YYSTYPE
YYSTYPE_IS_DECLARED	verilog_bison.c	238;"	d	file:
YYSTYPE_IS_DECLARED	verilog_bison.h	120;"	d
YYSTYPE_IS_TRIVIAL	verilog_bison.c	236;"	d	file:
YYSTYPE_IS_TRIVIAL	verilog_bison.h	118;"	d
YYTABLES_NAME	verilog_flex.c	2328;"	d	file:
YYTABLE_NINF	verilog_bison.c	800;"	d	file:
YYTERROR	verilog_bison.c	1160;"	d	file:
YYTOKENTYPE	verilog_bison.c	155;"	d	file:
YYTOKENTYPE	verilog_bison.h	37;"	d
YYTOKEN_TABLE	verilog_bison.c	149;"	d	file:
YYTRANSLATE	verilog_bison.c	476;"	d	file:
YYUNDEFTOK	verilog_bison.c	473;"	d	file:
YYUSE	verilog_bison.c	309;"	d	file:
YYUSE	verilog_bison.c	311;"	d	file:
YY_	verilog_bison.c	299;"	d	file:
YY_	verilog_bison.c	303;"	d	file:
YY_AT_BOL	verilog_flex.c	331;"	d	file:
YY_BREAK	verilog_flex.c	834;"	d	file:
YY_BUFFER_EOF_PENDING	verilog_flex.c	247;"	d	file:
YY_BUFFER_NEW	verilog_flex.c	235;"	d	file:
YY_BUFFER_NORMAL	verilog_flex.c	236;"	d	file:
YY_BUFFER_STATE	verilog_flex.c	/^typedef struct yy_buffer_state *YY_BUFFER_STATE;$/;"	t	typeref:struct:yy_buffer_state	file:
YY_BUF_SIZE	verilog_flex.c	144;"	d	file:
YY_CHAR	verilog_flex.c	/^typedef unsigned char YY_CHAR;$/;"	t	file:
YY_CURRENT_BUFFER	verilog_flex.c	263;"	d	file:
YY_CURRENT_BUFFER_LVALUE	verilog_flex.c	270;"	d	file:
YY_DECL	verilog_flex.c	822;"	d	file:
YY_DECL_IS_OURS	verilog_flex.c	818;"	d	file:
YY_DO_BEFORE_ACTION	verilog_flex.c	356;"	d	file:
YY_END_OF_BUFFER	verilog_flex.c	364;"	d	file:
YY_END_OF_BUFFER_CHAR	verilog_flex.c	140;"	d	file:
YY_EXIT_FAILURE	verilog_flex.c	2126;"	d	file:
YY_EXTRA_TYPE	verilog_flex.c	679;"	d	file:
YY_FATAL_ERROR	verilog_flex.c	809;"	d	file:
YY_FLEX_MAJOR_VERSION	verilog_flex.c	10;"	d	file:
YY_FLEX_MINOR_VERSION	verilog_flex.c	11;"	d	file:
YY_FLEX_SUBMINOR_VERSION	verilog_flex.c	12;"	d	file:
YY_FLUSH_BUFFER	verilog_flex.c	299;"	d	file:
YY_INPUT	verilog_flex.c	762;"	d	file:
YY_INT_ALIGNED	verilog_flex.c	5;"	d	file:
YY_LESS_LINENO	verilog_flex.c	164;"	d	file:
YY_LOCATION_PRINT	verilog_bison.c	1196;"	d	file:
YY_LOCATION_PRINT	verilog_bison.c	1201;"	d	file:
YY_MORE_ADJ	verilog_flex.c	626;"	d	file:
YY_NEW_FILE	verilog_flex.c	138;"	d	file:
YY_NULL	verilog_flex.c	112;"	d	file:
YY_NUM_RULES	verilog_flex.c	363;"	d	file:
YY_READ_BUF_SIZE	verilog_flex.c	747;"	d	file:
YY_REDUCE_PRINT	verilog_bison.c	1361;"	d	file:
YY_REDUCE_PRINT	verilog_bison.c	1374;"	d	file:
YY_RESTORE_YY_MORE_OFFSET	verilog_flex.c	627;"	d	file:
YY_RULE_SETUP	verilog_flex.c	837;"	d	file:
YY_SC_TO_UI	verilog_flex.c	119;"	d	file:
YY_STACK_PRINT	verilog_bison.c	1323;"	d	file:
YY_STACK_PRINT	verilog_bison.c	1373;"	d	file:
YY_START	verilog_flex.c	131;"	d	file:
YY_START_STACK_INCR	verilog_flex.c	804;"	d	file:
YY_STATE_BUF_SIZE	verilog_flex.c	149;"	d	file:
YY_STATE_EOF	verilog_flex.c	135;"	d	file:
YY_STRUCT_YY_BUFFER_STATE	verilog_flex.c	188;"	d	file:
YY_SYMBOL_PRINT	verilog_bison.c	1228;"	d	file:
YY_SYMBOL_PRINT	verilog_bison.c	1372;"	d	file:
YY_TYPEDEF_YY_BUFFER_STATE	verilog_flex.c	152;"	d	file:
YY_TYPEDEF_YY_SIZE_T	verilog_flex.c	183;"	d	file:
YY_USER_ACTION	verilog_flex.c	829;"	d	file:
YY_USE_CONST	verilog_flex.c	100;"	d	file:
YY_USE_CONST	verilog_flex.c	93;"	d	file:
_IMPLICIT_MEMORY_H_	implicit_memory.h	24;"	d
_NETLIST_STATS_H	netlist_stats.h	24;"	d
_STDLIB_H	verilog_bison.c	353;"	d	file:
_STDLIB_H	verilog_bison.c	381;"	d	file:
__STDC_LIMIT_MACROS	verilog_flex.c	40;"	d	file:
__STRING_CACHE_H__	string_cache.h	2;"	d
___hashtable_add	hashtable.c	/^void  ___hashtable_add(hashtable_t *h, void *key, size_t key_length, void *item)$/;"	f
___hashtable_compare_keys	hashtable.c	/^int ___hashtable_compare_keys(void *key, size_t key_len, void* key1, size_t key_len1)$/;"	f
___hashtable_destroy	hashtable.c	/^void ___hashtable_destroy(hashtable_t *h)$/;"	f
___hashtable_destroy_free_items	hashtable.c	/^void ___hashtable_destroy_free_items(hashtable_t *h)$/;"	f
___hashtable_get	hashtable.c	/^void* ___hashtable_get(hashtable_t *h, void *key, size_t key_length)$/;"	f
___hashtable_get_all	hashtable.c	/^void** ___hashtable_get_all(hashtable_t *h) {		$/;"	f
___hashtable_hash	hashtable.c	/^unsigned int ___hashtable_hash(void *key, size_t key_len, int max_key)$/;"	f
___hashtable_is_empty	hashtable.c	/^int ___hashtable_is_empty (hashtable_t *h)$/;"	f
___hashtable_remove	hashtable.c	/^void* ___hashtable_remove(hashtable_t *h, void *key, size_t key_length)$/;"	f
___queue_add	queue.c	/^void ___queue_add(queue_t *q, void *item)$/;"	f
___queue_destroy	queue.c	/^void ___queue_destroy(queue_t *q)$/;"	f
___queue_is_empty	queue.c	/^int ___queue_is_empty (queue_t *q)$/;"	f
___queue_remove	queue.c	/^void* ___queue_remove(queue_t *q)$/;"	f
___queue_remove_all	queue.c	/^void **___queue_remove_all(queue_t *q)$/;"	f
activation_blif_file	types.h	/^	char *activation_blif_file;$/;"	m	struct:global_args_t_t
activation_netlist_file	types.h	/^	char *activation_netlist_file;$/;"	m	struct:global_args_t_t
activation_t	activity_estimation.c	42;"	d	file:
activity_estimation	activity_estimation.c	/^void activity_estimation(char *input_filename, char *output_filename, int lut_size, netlist_t *LUT_netlist, netlist_t *CLUSTER_netlist)$/;"	f
add	hashtable.h	/^	void   (*add)                (hashtable_t *h, void *key, size_t key_length, void *item);$/;"	m	struct:hashtable_t_t
add	queue.h	/^	void   (*add)        (queue_t *q, void *item);$/;"	m	struct:queue_t_t
add_additional_items_to_lines	simulate_blif.c	/^void add_additional_items_to_lines(nnode_t *node, pin_names *p, lines_t *l)$/;"	f
add_block	read_netlist.c	/^add_block (char *node_name, char **pin_tokens, t_type_ptr type, short pass, netlist_t *netlist)$/;"	f
add_child_to_node	ast_util.c	/^void add_child_to_node(ast_node_t* node, ast_node_t *child) $/;"	f
add_driver_pin_to_net	netlist_utils.c	/^void add_driver_pin_to_net(nnet_t *net, npin_t *pin)$/;"	f
add_dummy_input_port_to_implicit_memory	implicit_memory.c	/^void add_dummy_input_port_to_implicit_memory(implicit_memory *memory, int size, char *port_name)$/;"	f
add_dummy_output_port_to_implicit_memory	implicit_memory.c	/^void add_dummy_output_port_to_implicit_memory(implicit_memory *memory, int size, char *port_name)$/;"	f
add_fanout_pin_to_net	netlist_utils.c	/^void add_fanout_pin_to_net(nnet_t *net, npin_t *pin)$/;"	f
add_hard_block_model	read_blif.c	/^void add_hard_block_model(hard_block_model *m, hard_block_ports *ports, hard_block_models *models)$/;"	f
add_input_pin_to_node	netlist_utils.c	/^void add_input_pin_to_node(nnode_t *node, npin_t *pin, int pin_idx)$/;"	f
add_input_port_information	netlist_utils.c	/^void add_input_port_information(nnode_t *node, int port_width)$/;"	f
add_input_port_to_implicit_memory	implicit_memory.c	/^void add_input_port_to_implicit_memory(implicit_memory *memory, signal_list_t *signals, char *port_name)$/;"	f
add_input_port_to_memory	memories.c	/^void add_input_port_to_memory(nnode_t *node, signal_list_t *signals, char *port_name)$/;"	f
add_io_node_and_driver	read_netlist.c	/^add_io_node_and_driver ($/;"	f	file:
add_node_to_netlist	netlist_utils.c	/^void add_node_to_netlist(netlist_t *netlist, nnode_t *node, short special_node)$/;"	f
add_output_pin_to_node	netlist_utils.c	/^void add_output_pin_to_node(nnode_t *node, npin_t *pin, int pin_idx)$/;"	f
add_output_port_information	netlist_utils.c	/^void add_output_port_information(nnode_t *node, int port_width)$/;"	f
add_output_port_to_implicit_memory	implicit_memory.c	/^void add_output_port_to_implicit_memory(implicit_memory *memory, signal_list_t *signals, char *port_name)$/;"	f
add_output_port_to_memory	memories.c	/^void add_output_port_to_memory(nnode_t *node, signal_list_t *signals, char *port_name)$/;"	f
add_pin_to_signal_list	netlist_utils.c	/^void add_pin_to_signal_list(signal_list_t *list, npin_t* pin)$/;"	f
add_subblock_to_node	read_netlist.c	/^add_subblock_to_node(nnode_t *current_block, char ***tokens_list, int num_subblocks, t_type_ptr type)$/;"	f
add_tag_data	high_level_data.c	/^void add_tag_data()$/;"	f
add_test_vector_to_lines	simulate_blif.c	/^void add_test_vector_to_lines(test_vector *v, lines_t *l, int cycle)$/;"	f
add_the_blackbox_for_mults	multipliers.c	/^void add_the_blackbox_for_mults(FILE *out)$/;"	f
add_to_distribution	netlist_stats.c	/^void add_to_distribution(int **distrib_ptr, int *distrib_size, int new_element)$/;"	f
add_top_input_nodes	read_blif.c	/^void add_top_input_nodes(FILE *file, hashtable_t *output_nets_hash)$/;"	f
add_veri_define	verilog_preprocessor.c	/^int add_veri_define(char *symbol, char *value, int line, veri_include *defined_in) $/;"	f
add_veri_include	verilog_preprocessor.c	/^veri_include* add_veri_include(char *path, int line, veri_include *included_from) $/;"	f
additional_data	types.h	/^	void *additional_data; \/\/ this is a point where you can add additional data for your optimization or technique$/;"	m	struct:ast_node_t_t
addr	memories.h	/^	signal_list_t *addr;$/;"	m	struct:__anon2
addr1	memories.h	/^	signal_list_t *addr1;$/;"	m	struct:__anon3
addr2	memories.h	/^	signal_list_t *addr2;$/;"	m	struct:__anon3
addr_width	implicit_memory.h	/^	int addr_width;$/;"	m	struct:__anon1
alias_output_assign_pins_to_inputs	netlist_create_from_ast.c	/^int alias_output_assign_pins_to_inputs(char_list_t *output_list, signal_list_t *input_list, ast_node_t *node)$/;"	f
all_file_items_list	parse_making_ast.c	/^ast_node_t **all_file_items_list;$/;"	v
all_warnings	types.h	/^	int all_warnings;$/;"	m	struct:global_args_t_t
alloca	verilog_bison.c	346;"	d	file:
allocate_children_to_node	ast_util.c	/^void allocate_children_to_node(ast_node_t* node, int num_children, ...) $/;"	f
allocate_more_input_pins	netlist_utils.c	/^void allocate_more_input_pins(nnode_t *node, int width)$/;"	f
allocate_more_output_pins	netlist_utils.c	/^void allocate_more_output_pins(nnode_t *node, int width)$/;"	f
allocate_netlist	netlist_utils.c	/^netlist_t* allocate_netlist()$/;"	f
allocate_nnet	netlist_utils.c	/^nnet_t* allocate_nnet()$/;"	f
allocate_nnode	netlist_utils.c	/^nnode_t* allocate_nnode() {$/;"	f
allocate_npin	netlist_utils.c	/^npin_t* allocate_npin() {$/;"	f
append_string	odin_util.c	/^char *append_string(char *string, char *appendage, ...)$/;"	f
arch_file	types.h	/^	char *arch_file; \/\/ Name of the FPGA architecture file$/;"	m	struct:config_t_t
arch_file	types.h	/^	char *arch_file; \/\/ Name of the FPGA architecture file$/;"	m	struct:global_args_t_t
assign_memory_from_mif_file	simulate_blif.c	/^void assign_memory_from_mif_file(FILE *mif, char *filename, int width, long depth, signed char *memory)$/;"	f
assign_node_to_line	simulate_blif.c	/^void assign_node_to_line(nnode_t *node, lines_t *l, int type, int single_pin)$/;"	f
assign_node_type_from_node_name	read_blif.c	/^short assign_node_type_from_node_name(char * output_name)$/;"	f
assignment_alias	netlist_create_from_ast.c	/^signal_list_t *assignment_alias(ast_node_t* assignment, char *instance_name_prefix)$/;"	f
associate_names	read_blif.c	/^hashtable_t *associate_names(char **names1, char **names2, int count)$/;"	f
associated_function	types.h	/^	short *associated_function;$/;"	m	struct:nnode_t_t
ast_modules	parse_making_ast.c	/^ast_node_t **ast_modules;$/;"	v
ast_node_t	types.h	/^typedef struct ast_node_t_t ast_node_t;$/;"	t	typeref:struct:ast_node_t_t
ast_node_t_t	types.h	/^struct ast_node_t_t$/;"	s
average_fanin	types.h	/^	float average_fanin; \/* = to the fanin of all nodes: basic outs, combo and ffs *\/	$/;"	m	struct:netlist_stats_t_t
average_fanout	types.h	/^	float average_fanout; \/* = to the fanout of all nodes: basic IOs, combo and ffs...no vcc, clocks, gnd *\/	$/;"	m	struct:netlist_stats_t_t
average_output_pins_per_node	types.h	/^	float average_output_pins_per_node;$/;"	m	struct:netlist_stats_t_t
backward_level	types.h	/^	int backward_level; \/\/ this is your reverse logic level relative to POs and FFs .. i.e. farthest PO$/;"	m	struct:nnode_t_t
backward_levels	types.h	/^	nnode_t ***backward_levels; \/\/ NOTE backward levels isn't neccessarily perfect.  Because of multiple output pins, the node can be put closer to POs than should be.  To fix, run a rebuild of the list afterwards since the marked "node->backward_level" is correct *\/$/;"	m	struct:netlist_t_t
backward_traversal_net_graph_display	netlist_visualizer.c	/^void backward_traversal_net_graph_display(FILE *fp, short marker_value, nnode_t *node)$/;"	f
base	types.h	/^			short base;$/;"	m	struct:ast_node_t_t::__anon18::__anon19
bases	types.h	/^} bases;$/;"	t	typeref:enum:__anon15
binary_size	types.h	/^			int binary_size;$/;"	m	struct:ast_node_t_t::__anon18::__anon19
binary_string	types.h	/^			char *binary_string;$/;"	m	struct:ast_node_t_t::__anon18::__anon19
bit_map	types.h	/^	char** bit_map; \/*storing the bit map *\/$/;"	m	struct:nnode_t_t
bit_map_line_count	types.h	/^	int bit_map_line_count;$/;"	m	struct:nnode_t_t
bit_strings	types.h	/^			char **bit_strings;$/;"	m	struct:ast_node_t_t::__anon18::__anon23
blif_file	types.h	/^	char *blif_file;$/;"	m	struct:global_args_t_t
block_instantiations_instance	parse_making_ast.c	/^ast_node_t **block_instantiations_instance;$/;"	v
block_tag	odin_ii.c	/^int block_tag;$/;"	v
boolean_difference	activity_estimation.c	/^short *boolean_difference(nnode_t *node, int variable_spot)$/;"	f
cache_hard_block_names	hard_blocks.c	/^void cache_hard_block_names()$/;"	f
calc_density	activity_estimation.c	/^double calc_density(nnode_t *node, int variable_spot, short *boolean_difference)$/;"	f
calc_probabilities_and_init_act_data	activity_estimation.c	/^void calc_probabilities_and_init_act_data(netlist_t *netlist)$/;"	f
calc_transition_density	activity_estimation.c	/^void calc_transition_density(netlist_t *netlist)$/;"	f
calculate_avg_fanin	netlist_stats.c	/^void calculate_avg_fanin(netlist_t *netlist)$/;"	f
calculate_avg_fanout	netlist_stats.c	/^void calculate_avg_fanout(netlist_t *netlist)$/;"	f
calculate_combinational_shapes	netlist_stats.c	/^void calculate_combinational_shapes(netlist_t *netlist)$/;"	f
char_list_t	types.h	/^typedef struct char_list_t_t char_list_t;$/;"	t	typeref:struct:char_list_t_t
char_list_t_t	types.h	/^struct char_list_t_t $/;"	s
check_memories_and_report_distribution	memories.c	/^void check_memories_and_report_distribution()$/;"	f
check_netlist	netlist_check.c	/^void check_netlist(netlist_t *netlist)$/;"	f
children	types.h	/^	ast_node_t **children;$/;"	m	struct:ast_node_t_t
clean_multipliers	multipliers.c	/^void clean_multipliers()$/;"	f
clean_up_parser_for_file	parse_making_ast.c	/^void clean_up_parser_for_file()$/;"	f
clean_veri_define	verilog_preprocessor.c	/^void clean_veri_define(veri_define *current) $/;"	f
clean_veri_include	verilog_preprocessor.c	/^void clean_veri_include(veri_include *current) $/;"	f
cleanup_activation	activity_estimation.c	/^void cleanup_activation(netlist_t *netlist)$/;"	f
cleanup_hard_blocks	parse_making_ast.c	/^void cleanup_hard_blocks()$/;"	f
cleanup_parser	parse_making_ast.c	/^void cleanup_parser()$/;"	f
cleanup_veri_preproc	verilog_preprocessor.c	/^int cleanup_veri_preproc() $/;"	f
clk	memories.h	/^	npin_t *clk;$/;"	m	struct:__anon2
clk	memories.h	/^	npin_t *clk;$/;"	m	struct:__anon3
clock_added	implicit_memory.h	/^	char clock_added;$/;"	m	struct:__anon1
clocks	types.h	/^	nnode_t** clocks;$/;"	m	struct:netlist_t_t
collapse_implicit_memory_to_single_port_ram	implicit_memory.c	/^void collapse_implicit_memory_to_single_port_ram(implicit_memory *memory)$/;"	f
combinational_shape	types.h	/^	int **combinational_shape;$/;"	m	struct:netlist_stats_t_t
combine_lists	netlist_utils.c	/^signal_list_t *combine_lists(signal_list_t **signal_lists, int num_signal_lists)$/;"	f
combine_lists_without_freeing_originals	netlist_utils.c	/^signal_list_t *combine_lists_without_freeing_originals(signal_list_t **signal_lists, int num_signal_lists)$/;"	f
combine_nets	netlist_utils.c	/^void combine_nets(nnet_t *output_net, nnet_t* input_net, netlist_t *netlist)$/;"	f
combined	types.h	/^	short combined;$/;"	m	struct:nnet_t_t
compare_hard_block_pin_names	read_blif.c	/^static int compare_hard_block_pin_names(const void *p1, const void *p2)$/;"	f	file:
compare_npin_t_names	netlist_utils.c	/^static int compare_npin_t_names(const void *p1, const void *p2)$/;"	f	file:
compare_test_vectors	simulate_blif.c	/^int compare_test_vectors(test_vector *v1, test_vector *v2)$/;"	f
compute_and_store_value	simulate_blif.c	/^void compute_and_store_value(nnode_t *node, int cycle)$/;"	f
compute_dual_port_memory	simulate_blif.c	/^void compute_dual_port_memory(nnode_t *node, int cycle)$/;"	f
compute_flipflop_node	simulate_blif.c	/^void compute_flipflop_node(nnode_t *node, int cycle)$/;"	f
compute_generic_node	simulate_blif.c	/^void compute_generic_node(nnode_t *node, int cycle)$/;"	f
compute_hard_ip_node	simulate_blif.c	/^void compute_hard_ip_node(nnode_t *node, int cycle)$/;"	f
compute_memory_address	simulate_blif.c	/^long compute_memory_address(signal_list_t *addr, int cycle)$/;"	f
compute_memory_node	simulate_blif.c	/^void compute_memory_node(nnode_t *node, int cycle)$/;"	f
compute_multiply_node	simulate_blif.c	/^void compute_multiply_node(nnode_t *node, int cycle)$/;"	f
compute_mux_2_node	simulate_blif.c	/^void compute_mux_2_node(nnode_t *node, int cycle)$/;"	f
compute_single_port_memory	simulate_blif.c	/^void compute_single_port_memory(nnode_t *node, int cycle)$/;"	f
concat	types.h	/^		} concat;$/;"	m	union:ast_node_t_t::__anon18	typeref:struct:ast_node_t_t::__anon18::__anon23
concatenate_signal_lists	netlist_create_from_ast.c	/^signal_list_t *concatenate_signal_lists(signal_list_t **signal_lists, int num_signal_lists)$/;"	f
config_file	types.h	/^	char *config_file;$/;"	m	struct:global_args_t_t
config_t	types.h	/^typedef struct config_t_t config_t;$/;"	t	typeref:struct:config_t_t
config_t_t	types.h	/^struct config_t_t$/;"	s
configuration	read_xml_config_file.c	/^config_t configuration;$/;"	v
connect_hard_block_and_alias	netlist_create_from_ast.c	/^void connect_hard_block_and_alias(ast_node_t* hb_instance, char *instance_name_prefix)$/;"	f
connect_memory_and_alias	netlist_create_from_ast.c	/^void connect_memory_and_alias(ast_node_t* hb_instance, char *instance_name_prefix)$/;"	f
connect_module_instantiation_and_alias	netlist_create_from_ast.c	/^void connect_module_instantiation_and_alias(short PASS, ast_node_t* module_instance, char *instance_name_prefix)$/;"	f
connect_nodes	netlist_utils.c	/^void connect_nodes(nnode_t *out_node, int out_idx, nnode_t *in_node, int in_idx)$/;"	f
constantFold	ast_optimizations.c	/^info_ast_visit_t *constantFold(ast_node_t *node)$/;"	f
convert_ast_to_netlist_recursing_via_modules	netlist_create_from_ast.c	/^void convert_ast_to_netlist_recursing_via_modules(ast_node_t* current_module, char *instance_name, int level)$/;"	f
convert_binary_string_of_size_to_bit_string	odin_util.c	/^char *convert_binary_string_of_size_to_bit_string(char *orig_string, int binary_size)$/;"	f
convert_dec_string_of_size_to_long_long	odin_util.c	/^long long convert_dec_string_of_size_to_long_long(char *orig_string, int size)$/;"	f
convert_hex_string_of_size_to_bit_string	odin_util.c	/^char *convert_hex_string_of_size_to_bit_string(char *orig_string, int binary_size)$/;"	f
convert_long_long_to_bit_string	odin_util.c	/^char *convert_long_long_to_bit_string(long long orig_long, int num_bits)$/;"	f
convert_oct_string_of_size_to_bit_string	odin_util.c	/^char *convert_oct_string_of_size_to_bit_string(char *orig_string, int binary_size)$/;"	f
convert_string_of_radix_to_bit_string	odin_util.c	/^char *convert_string_of_radix_to_bit_string(char *string, int radix, int binary_size)$/;"	f
convert_string_of_radix_to_long_long	odin_util.c	/^long long convert_string_of_radix_to_long_long(char *orig_string, int radix)$/;"	f
copy_input_npin	netlist_utils.c	/^npin_t* copy_input_npin(npin_t* copy_pin)$/;"	f
copy_input_port_to_memory	memories.c	/^void copy_input_port_to_memory(nnode_t *node, signal_list_t *signals, char *port_name)$/;"	f
copy_input_signals	netlist_utils.c	/^signal_list_t *copy_input_signals(signal_list_t *signals)$/;"	f
copy_output_npin	netlist_utils.c	/^npin_t* copy_output_npin(npin_t* copy_pin)$/;"	f
copy_output_port_to_memory	memories.c	/^void copy_output_port_to_memory(nnode_t *node, signal_list_t *signals, char *port_name)$/;"	f
copy_output_signals	netlist_utils.c	/^signal_list_t *copy_output_signals(signal_list_t *signals)$/;"	f
count	hashtable.h	/^	int count;$/;"	m	struct:hashtable_t_t
count	queue.h	/^	int count;$/;"	m	struct:queue_t_t
count	read_blif.c	/^	int count;$/;"	m	struct:__anon4	file:
count	read_blif.c	/^	int count;$/;"	m	struct:__anon5	file:
count	read_blif.c	/^	int count;$/;"	m	struct:__anon7	file:
count	simulate_blif.h	/^	int 	   count;  \/\/ Number of stages.$/;"	m	struct:__anon11
count	simulate_blif.h	/^	int            count;$/;"	m	struct:__anon12
count	simulate_blif.h	/^	int    count;$/;"	m	struct:__anon10
count	simulate_blif.h	/^	int   count;$/;"	m	struct:__anon8
count	types.h	/^	int count;$/;"	m	struct:signal_list_t_t
count_blif_lines	read_blif.c	/^int count_blif_lines(FILE *file)$/;"	f
count_nodes_in_netlist	netlist_utils.c	/^int count_nodes_in_netlist(netlist_t *netlist)$/;"	f
count_test_vectors	simulate_blif.c	/^int count_test_vectors(FILE *in)$/;"	f
counts	simulate_blif.h	/^	int           *counts;$/;"	m	struct:__anon12
counts	simulate_blif.h	/^	int       *counts; \/\/ Number of nodes in each stage.$/;"	m	struct:__anon11
coverage	types.h	/^	unsigned long coverage;$/;"	m	struct:npin_t_t
create_all_driver_nets_in_this_module	netlist_create_from_ast.c	/^void create_all_driver_nets_in_this_module(char *instance_name_prefix)$/;"	f
create_case	netlist_create_from_ast.c	/^signal_list_t *create_case(ast_node_t *case_ast, char *instance_name_prefix)$/;"	f
create_case_control_signals	netlist_create_from_ast.c	/^void create_case_control_signals(ast_node_t *case_list_of_items, ast_node_t *compare_against, nnode_t *case_node, char *instance_name_prefix)$/;"	f
create_case_mux_statements	netlist_create_from_ast.c	/^signal_list_t *create_case_mux_statements(ast_node_t *case_list_of_items, nnode_t *case_node, char *instance_name_prefix)$/;"	f
create_decoder	memories.c	/^signal_list_t *create_decoder(nnode_t *node, short mark, signal_list_t *input_list)$/;"	f
create_dual_port_ram_block	netlist_create_from_ast.c	/^signal_list_t *create_dual_port_ram_block(ast_node_t* block, char *instance_name_prefix, t_model* hb_model)$/;"	f
create_gate	netlist_create_from_ast.c	/^signal_list_t *create_gate(ast_node_t* gate, char *instance_name_prefix)$/;"	f
create_hard_block	netlist_create_from_ast.c	/^signal_list_t *create_hard_block(ast_node_t* block, char *instance_name_prefix)$/;"	f
create_hard_block_models	read_blif.c	/^hard_block_models *create_hard_block_models()$/;"	f
create_hard_block_nodes	read_blif.c	/^void create_hard_block_nodes(hard_block_models *models, FILE *file, hashtable_t *output_nets_hash)$/;"	f
create_hashtable	hashtable.c	/^hashtable_t* create_hashtable(int store_size)$/;"	f
create_if	netlist_create_from_ast.c	/^signal_list_t *create_if(ast_node_t *if_ast, char *instance_name_prefix)$/;"	f
create_if_control_signals	netlist_create_from_ast.c	/^void create_if_control_signals(ast_node_t *if_expression, nnode_t *if_node, char *instance_name_prefix)$/;"	f
create_if_for_question	netlist_create_from_ast.c	/^signal_list_t *create_if_for_question(ast_node_t *if_ast, char *instance_name_prefix)$/;"	f
create_if_mux_statements	netlist_create_from_ast.c	/^signal_list_t *create_if_mux_statements(ast_node_t *if_ast, nnode_t *if_node, char *instance_name_prefix)$/;"	f
create_if_question_mux_expressions	netlist_create_from_ast.c	/^signal_list_t *create_if_question_mux_expressions(ast_node_t *if_ast, nnode_t *if_node, char *instance_name_prefix)$/;"	f
create_implicit_memory_block	implicit_memory.c	/^implicit_memory *create_implicit_memory_block(int data_width, long long words, char *name, char *instance_name_prefix)$/;"	f
create_internal_node_and_driver	read_blif.c	/^void create_internal_node_and_driver(FILE *file, hashtable_t *output_nets_hash)$/;"	f
create_latch_node_and_driver	read_blif.c	/^void create_latch_node_and_driver(FILE *file, hashtable_t *output_nets_hash)$/;"	f
create_line	simulate_blif.c	/^line_t *create_line(char *name)$/;"	f
create_lines	simulate_blif.c	/^lines_t *create_lines(netlist_t *netlist, int type)$/;"	f
create_mux_expressions	netlist_create_from_ast.c	/^signal_list_t *create_mux_expressions(signal_list_t **expression_lists, nnode_t *mux_node, int num_expression_lists, char *instance_name_prefix)$/;"	f
create_mux_statements	netlist_create_from_ast.c	/^signal_list_t *create_mux_statements(signal_list_t **statement_lists, nnode_t *mux_node, int num_statement_lists, char *instance_name_prefix)$/;"	f
create_netlist	netlist_create_from_ast.c	/^void create_netlist()$/;"	f
create_node_w_type	ast_util.c	/^ast_node_t* create_node_w_type(ids id, int line_number, int file_number)$/;"	f
create_operation_node	netlist_create_from_ast.c	/^signal_list_t *create_operation_node(ast_node_t *op, signal_list_t **input_lists, int list_size, char *instance_name_prefix)$/;"	f
create_output_pin	netlist_create_from_ast.c	/^signal_list_t *create_output_pin(ast_node_t* var_declare, char *instance_name_prefix)$/;"	f
create_param_table_for_module	netlist_create_from_ast.c	/^void create_param_table_for_module(ast_node_t* parent_parameter_list, ast_node_t *module_items, char *module_name)$/;"	f
create_pins	netlist_create_from_ast.c	/^signal_list_t *create_pins(ast_node_t* var_declare, char *name, char *instance_name_prefix)$/;"	f
create_queue	queue.c	/^queue_t* create_queue()$/;"	f
create_single_port_ram_block	netlist_create_from_ast.c	/^signal_list_t *create_single_port_ram_block(ast_node_t* block, char *instance_name_prefix, t_model* hb_model)$/;"	f
create_soft_dual_port_ram_block	netlist_create_from_ast.c	/^signal_list_t *create_soft_dual_port_ram_block(ast_node_t* block, char *instance_name_prefix)$/;"	f
create_soft_single_port_ram_block	netlist_create_from_ast.c	/^signal_list_t *create_soft_single_port_ram_block(ast_node_t* block, char *instance_name_prefix)$/;"	f
create_symbol_table_for_module	netlist_create_from_ast.c	/^void create_symbol_table_for_module(ast_node_t* module_items, char *module_name)$/;"	f
create_top_driver_nets	netlist_create_from_ast.c	/^void create_top_driver_nets(ast_node_t* module, char *instance_name_prefix)$/;"	f
create_top_output_nodes	netlist_create_from_ast.c	/^void create_top_output_nodes(ast_node_t* module, char *instance_name_prefix)$/;"	f
create_tree_node_id	ast_util.c	/^ast_node_t* create_tree_node_id(char* string, int line_number, int file_number)$/;"	f
create_tree_node_long_long_number	ast_util.c	/^ast_node_t *create_tree_node_long_long_number(long long number, int constant_bit_size, int line_number, int file_number)$/;"	f
create_tree_node_number	ast_util.c	/^ast_node_t *create_tree_node_number(char* number, int line_number, int file_number)$/;"	f
current_index	verilog_preprocessor.h	/^	int current_index;$/;"	m	struct:veri_Defines
current_index	verilog_preprocessor.h	/^	int current_index;$/;"	m	struct:veri_Includes
current_parse_file	odin_ii.c	/^int current_parse_file;$/;"	v
current_size	verilog_preprocessor.h	/^	int current_size;$/;"	m	struct:veri_Defines
current_size	verilog_preprocessor.h	/^	int current_size;$/;"	m	struct:veri_Includes
cycle	types.h	/^	int *cycle;          \/\/ The last cycle the pin was computed for.$/;"	m	struct:npin_t_t
cycle	types.h	/^	int cycle;                            \/\/ Stores the cycle of all connected pins.$/;"	m	struct:nnet_t_t
data	memories.h	/^	signal_list_t *data;$/;"	m	struct:__anon2
data	string_cache.h	/^	void **data;$/;"	m	struct:__anon13
data1	memories.h	/^	signal_list_t *data1;$/;"	m	struct:__anon3
data2	memories.h	/^	signal_list_t *data2;$/;"	m	struct:__anon3
data_width	implicit_memory.h	/^	int data_width;$/;"	m	struct:__anon1
debug_output_path	types.h	/^	char *debug_output_path; \/\/ path for where to output the debug outputs$/;"	m	struct:config_t_t
declare_hard_multiplier	multipliers.c	/^void declare_hard_multiplier(nnode_t *node)$/;"	f
define_decoded_mux	output_blif.c	/^void define_decoded_mux(nnode_t *node, FILE *out)$/;"	f
define_ff	output_blif.c	/^void define_ff(nnode_t *node, FILE *out)$/;"	f
define_hard_block	hard_blocks.c	/^void define_hard_block(nnode_t *node, short type, FILE *out)$/;"	f
define_logical_function	output_blif.c	/^void define_logical_function(nnode_t *node, short type, FILE *out)$/;"	f
define_mult_function	multipliers.c	/^void define_mult_function(nnode_t *node, short type, FILE *out)$/;"	f
define_nets_with_driver	netlist_create_from_ast.c	/^nnet_t* define_nets_with_driver(ast_node_t* var_declare, char *instance_name_prefix)$/;"	f
define_nodes_and_nets_with_driver	netlist_create_from_ast.c	/^nnet_t* define_nodes_and_nets_with_driver(ast_node_t* var_declare, char *instance_name_prefix)$/;"	f
define_set_input_logical_function	output_blif.c	/^void define_set_input_logical_function(nnode_t *node, char *bit_output, FILE *out)$/;"	f
defined_constants	verilog_preprocessor.h	/^	veri_define **defined_constants;$/;"	m	struct:veri_Defines
defined_in	verilog_preprocessor.h	/^	veri_include *defined_in;$/;"	m	struct:veri_define
defines_for_file_sc	parse_making_ast.c	/^STRING_CACHE *defines_for_file_sc;$/;"	v
defines_for_module_sc	parse_making_ast.c	/^STRING_CACHE **defines_for_module_sc;$/;"	v
depth_first_traversal_check_if_forward_leveled	netlist_check.c	/^void depth_first_traversal_check_if_forward_leveled(short marker_value, netlist_t *netlist)$/;"	f
depth_first_traversal_graph_display	netlist_visualizer.c	/^void depth_first_traversal_graph_display(FILE *out, short marker_value, netlist_t *netlist)$/;"	f
depth_first_traversal_graphcrunch_display	output_graphcrunch_format.c	/^void depth_first_traversal_graphcrunch_display(nnode_t *node, FILE *fp, int traverse_mark_number)$/;"	f
depth_first_traversal_graphcrunch_stats	netlist_stats.c	/^void depth_first_traversal_graphcrunch_stats(nnode_t *node, FILE *fp, int traverse_mark_number)$/;"	f
depth_first_traversal_to_output	output_blif.c	/^void depth_first_traversal_to_output(short marker_value, FILE *fp, netlist_t *netlist)$/;"	f
depth_first_traversal_to_partial_map	partial_map.c	/^void depth_first_traversal_to_partial_map(short marker_value, netlist_t *netlist)$/;"	f
depth_first_traverse_check_if_forward_leveled	netlist_check.c	/^void depth_first_traverse_check_if_forward_leveled(nnode_t *node, int traverse_mark_number)$/;"	f
depth_first_traverse_graphcrunch	output_graphcrunch_format.c	/^void depth_first_traverse_graphcrunch(FILE *out, short marker_value, netlist_t *netlist)$/;"	f
depth_first_traverse_parital_map	partial_map.c	/^void depth_first_traverse_parital_map(nnode_t *node, int traverse_mark_number, netlist_t *netlist)$/;"	f
depth_first_traverse_stats	netlist_stats.c	/^void depth_first_traverse_stats(FILE *out, short marker_value, netlist_t *netlist)$/;"	f
depth_first_traverse_until_next_ff_or_output	netlist_check.c	/^void depth_first_traverse_until_next_ff_or_output(nnode_t *node, nnode_t *calling_node, int traverse_mark_number, int seq_level, netlist_t *netlist)$/;"	f
depth_first_traverse_visualize	netlist_visualizer.c	/^void depth_first_traverse_visualize(nnode_t *node, FILE *fp, int traverse_mark_number)$/;"	f
depth_traverse_count	netlist_utils.c	/^void depth_traverse_count(nnode_t *node, int *count, int traverse_mark_number)$/;"	f
depth_traverse_output_blif	output_blif.c	/^void depth_traverse_output_blif(nnode_t *node, int traverse_mark_number, FILE *fp)$/;"	f
deregister_hard_blocks	hard_blocks.c	/^void deregister_hard_blocks()$/;"	f
destroy	hashtable.h	/^	void   (*destroy)            (hashtable_t *h);$/;"	m	struct:hashtable_t_t
destroy	queue.h	/^	void   (*destroy)    (queue_t *q);$/;"	m	struct:queue_t_t
destroy_free_items	hashtable.h	/^	void   (*destroy_free_items) (hashtable_t *h);$/;"	m	struct:hashtable_t_t
display_node_stats	netlist_stats.c	/^void display_node_stats(FILE *fp, nnode_t* node)$/;"	f
display_per_node_stats	netlist_stats.c	/^void display_per_node_stats(FILE *fp, netlist_t *netlist)$/;"	f
do_activation_estimation	odin_ii.c	/^void do_activation_estimation($/;"	f
do_high_level_synthesis	odin_ii.c	/^void do_high_level_synthesis()$/;"	f
do_simulation_of_netlist	odin_ii.c	/^void do_simulation_of_netlist()$/;"	f
dp_memory_list	memories.c	/^struct s_linked_vptr *dp_memory_list;$/;"	v	typeref:struct:s_linked_vptr
dp_ram_signals	memories.h	/^} dp_ram_signals;$/;"	t	typeref:struct:__anon3
driver_pin	types.h	/^	npin_t *driver_pin; \/\/ the pin that drives the net$/;"	m	struct:nnet_t_t
dual_port_rams	hard_blocks.c	/^t_model *dual_port_rams = NULL;$/;"	v
dual_port_rams	memories.c	/^t_model *dual_port_rams;$/;"	v
dum_parse	read_blif.c	/^static void dum_parse (char *buffer, FILE *file)$/;"	f	file:
enqueue_node_if_ready	simulate_blif.c	/^int enqueue_node_if_ready(queue_t* queue, nnode_t* node, int cycle)$/;"	f
error_message	errors.c	/^void error_message(short error_type, int line_number, int file, char *message, ...)$/;"	f
evaluate_sensitivity_list	netlist_create_from_ast.c	/^signal_list_t *evaluate_sensitivity_list(ast_node_t *delay_control, char *instance_name_prefix)$/;"	f
fanin_distribution	types.h	/^	int *fanin_distribution;$/;"	m	struct:netlist_stats_t_t
fanout_distribution	types.h	/^	int *fanout_distribution;$/;"	m	struct:netlist_stats_t_t
fanout_pins	types.h	/^	npin_t **fanout_pins; \/\/ the pins pointed to by the net$/;"	m	struct:nnet_t_t
far_tag	types.h	/^	int far_tag;$/;"	m	struct:ast_node_t_t
ff_nodes	types.h	/^	nnode_t** ff_nodes;$/;"	m	struct:netlist_t_t
file_line_number	read_blif.c	/^int file_line_number;$/;"	v
file_line_number	read_blif.c	/^int file_line_number;\/* keeps track of the present line, used for printing the error line : line number *\/$/;"	v
file_number	types.h	/^	int file_number;$/;"	m	struct:ast_node_t_t
filter_memories_by_soft_logic_cutoff	memories.c	/^void filter_memories_by_soft_logic_cutoff()$/;"	f
finalize_implicit_memory	implicit_memory.c	/^void finalize_implicit_memory(implicit_memory *memory)$/;"	f
find_hard_block	hard_blocks.c	/^t_model* find_hard_block(char *name)$/;"	f
find_hard_multipliers	multipliers.c	/^void find_hard_multipliers()$/;"	f
find_node_at_top_of_combo_loop	netlist_check.c	/^nnode_t *find_node_at_top_of_combo_loop(nnode_t *start_node)$/;"	f
find_portname_in_lines	simulate_blif.c	/^int find_portname_in_lines(char* port_name, lines_t *l)$/;"	f
find_smallest_non_numerical	netlist_create_from_ast.c	/^int find_smallest_non_numerical(ast_node_t *node, signal_list_t **input_list, int num_input_lists)$/;"	f
find_top_module	netlist_create_from_ast.c	/^ast_node_t *find_top_module()$/;"	f
fixed_hard_multiplier	types.h	/^	int fixed_hard_multiplier;$/;"	m	struct:config_t_t
flag	verilog_preprocessor.h	/^	int flag;$/;"	m	struct:veri_flag_node
flag_undriven_input_pins	simulate_blif.c	/^void flag_undriven_input_pins(nnode_t *node)$/;"	f
flex_int16_t	verilog_flex.c	/^typedef int16_t flex_int16_t;$/;"	t	file:
flex_int16_t	verilog_flex.c	/^typedef short int flex_int16_t;$/;"	t	file:
flex_int32_t	verilog_flex.c	/^typedef int flex_int32_t;$/;"	t	file:
flex_int32_t	verilog_flex.c	/^typedef int32_t flex_int32_t;$/;"	t	file:
flex_int8_t	verilog_flex.c	/^typedef int8_t flex_int8_t;$/;"	t	file:
flex_int8_t	verilog_flex.c	/^typedef signed char flex_int8_t;$/;"	t	file:
flex_uint16_t	verilog_flex.c	/^typedef uint16_t flex_uint16_t;$/;"	t	file:
flex_uint16_t	verilog_flex.c	/^typedef unsigned short int flex_uint16_t;$/;"	t	file:
flex_uint32_t	verilog_flex.c	/^typedef uint32_t flex_uint32_t;$/;"	t	file:
flex_uint32_t	verilog_flex.c	/^typedef unsigned int flex_uint32_t;$/;"	t	file:
flex_uint8_t	verilog_flex.c	/^typedef uint8_t flex_uint8_t;$/;"	t	file:
flex_uint8_t	verilog_flex.c	/^typedef unsigned char flex_uint8_t; $/;"	t	file:
forward_level	types.h	/^	int forward_level; \/\/ this is your logic level relative to PIs and FFs .. i.e farthest PI$/;"	m	struct:nnode_t_t
forward_levels	types.h	/^	nnode_t ***forward_levels;$/;"	m	struct:netlist_t_t
forward_traversal_net_graph_display	netlist_visualizer.c	/^void forward_traversal_net_graph_display(FILE *fp, short marker_value, nnode_t *node)$/;"	f
free	string_cache.h	/^	long free;$/;"	m	struct:__anon13
free_ast_node	ast_util.c	/^void free_ast_node(ast_node_t *child)$/;"	f
free_ast_node_only	ast_util.c	/^void free_ast_node_only(ast_node_t *child)$/;"	f
free_child_in_tree	ast_util.c	/^void free_child_in_tree(ast_node_t *from, int idx_removal)$/;"	f
free_dp_ram_signals	memories.c	/^void free_dp_ram_signals(dp_ram_signals *signals)$/;"	f
free_hard_block_model	read_blif.c	/^void free_hard_block_model(hard_block_model *model)$/;"	f
free_hard_block_models	read_blif.c	/^void free_hard_block_models(hard_block_models *models)$/;"	f
free_hard_block_pins	read_blif.c	/^void free_hard_block_pins(hard_block_pins *p)$/;"	f
free_hard_block_ports	read_blif.c	/^void free_hard_block_ports(hard_block_ports *p)$/;"	f
free_implicit_memory_index_and_finalize_memories	implicit_memory.c	/^void free_implicit_memory_index_and_finalize_memories()$/;"	f
free_lines	simulate_blif.c	/^void free_lines(lines_t *l)$/;"	f
free_memory_lists	memories.c	/^void free_memory_lists()$/;"	f
free_netlist	netlist_utils.c	/^void free_netlist(netlist_t *to_free)$/;"	f
free_nnet	netlist_utils.c	/^void free_nnet(nnet_t *to_free)$/;"	f
free_nnode	netlist_utils.c	/^void free_nnode(nnode_t *to_free) $/;"	f
free_npin	netlist_utils.c	/^void free_npin(npin_t *to_free)$/;"	f
free_pin_name_list	simulate_blif.c	/^void free_pin_name_list(pin_names *p)$/;"	f
free_signal_list	netlist_utils.c	/^void free_signal_list(signal_list_t *list)$/;"	f
free_sp_ram_signals	memories.c	/^void free_sp_ram_signals(sp_ram_signals *signals)$/;"	f
free_stages	simulate_blif.c	/^void free_stages(stages *s)$/;"	f
free_test_vector	simulate_blif.c	/^void free_test_vector(test_vector* v)$/;"	f
from	types.h	/^	ast_node_t *from;$/;"	m	struct:info_ast_visit_t_t
from_child_position	types.h	/^	int from_child_position;$/;"	m	struct:info_ast_visit_t_t
function_to_print_node_and_its_pin	print_netlist.c	/^void function_to_print_node_and_its_pin(npin_t * temp_pin)  $/;"	f
generate_hard_block_ports_signature	read_blif.c	/^char *generate_hard_block_ports_signature(hard_block_ports *ports)$/;"	f
generate_random_test_vector	simulate_blif.c	/^test_vector *generate_random_test_vector(lines_t *l, int cycle, hashtable_t *hold_high_index, hashtable_t *hold_low_index)$/;"	f
generate_sc_hash	string_cache.c	/^generate_sc_hash(STRING_CACHE * sc)$/;"	f
generate_tag	high_level_data.c	/^int generate_tag()$/;"	f
generate_vector_header	simulate_blif.c	/^char *generate_vector_header(lines_t *l)$/;"	f
get	hashtable.h	/^	void*  (*get)                (hashtable_t *h, void *key, size_t key_length);$/;"	m	struct:hashtable_t_t
get_all	hashtable.h	/^	void** (*get_all)            (hashtable_t *h);$/;"	m	struct:hashtable_t_t
get_children_of	simulate_blif.c	/^nnode_t **get_children_of(nnode_t *node, int *num_children)$/;"	f
get_circuit_filename	simulate_blif.c	/^char *get_circuit_filename()$/;"	f
get_dp_ram_depth	memories.c	/^int get_dp_ram_depth(nnode_t *node)$/;"	f
get_dp_ram_signals	memories.c	/^dp_ram_signals *get_dp_ram_signals(nnode_t *node)$/;"	f
get_dp_ram_split_depth	memories.c	/^int get_dp_ram_split_depth()$/;"	f
get_dp_ram_split_width	memories.c	/^int get_dp_ram_split_width()$/;"	f
get_dp_ram_width	memories.c	/^int get_dp_ram_width(nnode_t *node)$/;"	f
get_hard_block_model	read_blif.c	/^hard_block_model *get_hard_block_model(char *name, hard_block_ports *ports, hard_block_models *models)$/;"	f
get_hard_block_pin_number	read_blif.c	/^long get_hard_block_pin_number(char *original_name)$/;"	f
get_hard_block_port_name	read_blif.c	/^char *get_hard_block_port_name(char *name)$/;"	f
get_hard_block_ports	read_blif.c	/^hard_block_ports *get_hard_block_ports(char **pins, int count)$/;"	f
get_input_pin_index_from_mapping	netlist_utils.c	/^int get_input_pin_index_from_mapping(nnode_t *node, char *name)$/;"	f
get_input_port_index_from_mapping	netlist_utils.c	/^int get_input_port_index_from_mapping(nnode_t *node, char *name)$/;"	f
get_line_pin_value	simulate_blif.c	/^signed char get_line_pin_value(line_t *line, int pin_num, int cycle)$/;"	f
get_linenumber	high_level_data.c	/^int get_linenumber(ast_node_t *node)$/;"	f
get_memory_port_size	memories.c	/^int get_memory_port_size(char *name)$/;"	f
get_mif_filename	simulate_blif.c	/^char *get_mif_filename(nnode_t *node)$/;"	f
get_model_port	hard_blocks.c	/^t_model_ports *get_model_port(t_model_ports *ports, char *name)$/;"	f
get_name_of_pin_at_bit	ast_util.c	/^char *get_name_of_pin_at_bit(ast_node_t *var_node, int bit, char *instance_name_prefix)$/;"	f
get_name_of_pins	ast_util.c	/^char_list_t *get_name_of_pins(ast_node_t *var_node, char *instance_name_prefix)$/;"	f
get_name_of_pins_number	ast_util.c	/^char **get_name_of_pins_number(ast_node_t *var_node, int start, int width)$/;"	f
get_name_of_pins_with_prefix	ast_util.c	/^char_list_t *get_name_of_pins_with_prefix(ast_node_t *var_node, char *instance_name_prefix)$/;"	f
get_name_of_var_declare_at_bit	ast_util.c	/^char *get_name_of_var_declare_at_bit(ast_node_t *var_declare, int bit)$/;"	f
get_next_vector	simulate_blif.c	/^int get_next_vector(FILE *file, char *buffer)$/;"	f
get_num_covered_nodes	simulate_blif.c	/^int get_num_covered_nodes(stages *s)$/;"	f
get_one_pin	node_creation_library.c	/^npin_t *get_one_pin(netlist_t *netlist)$/;"	f
get_options	odin_ii.c	/^void get_options(int argc, char **argv)$/;"	f
get_output_pin_index_from_mapping	netlist_utils.c	/^int get_output_pin_index_from_mapping(nnode_t *node, char *name)$/;"	f
get_output_port_index_from_mapping	netlist_utils.c	/^int get_output_port_index_from_mapping(nnode_t *node, char *name)$/;"	f
get_pad_pin	node_creation_library.c	/^npin_t *get_pad_pin(netlist_t *netlist)$/;"	f
get_pin_cycle	simulate_blif.c	/^inline int get_pin_cycle(npin_t *pin)$/;"	f
get_pin_name	odin_util.c	/^char *get_pin_name(char *name)$/;"	f
get_pin_number	odin_util.c	/^int get_pin_number(char *name)$/;"	f
get_pin_value	simulate_blif.c	/^signed char get_pin_value(npin_t *pin, int cycle)$/;"	f
get_port_name	odin_util.c	/^char *get_port_name(char *name)$/;"	f
get_range	ast_util.c	/^int get_range(ast_node_t* first_node) $/;"	f
get_sp_ram_depth	memories.c	/^int get_sp_ram_depth(nnode_t *node)$/;"	f
get_sp_ram_signals	memories.c	/^sp_ram_signals *get_sp_ram_signals(nnode_t *node)$/;"	f
get_sp_ram_split_depth	memories.c	/^int get_sp_ram_split_depth()$/;"	f
get_sp_ram_split_width	memories.c	/^int get_sp_ram_split_width()$/;"	f
get_sp_ram_width	memories.c	/^int get_sp_ram_width(nnode_t *node)$/;"	f
get_type_by_name	read_netlist.c	/^get_type_by_name ($/;"	f	file:
get_values_offset	simulate_blif.c	/^inline int get_values_offset(int cycle)$/;"	f
get_zero_pin	node_creation_library.c	/^npin_t *get_zero_pin(netlist_t *netlist)$/;"	f
global_args	netlist_utils.c	/^global_args_t global_args;$/;"	v
global_args	odin_ii.c	/^global_args_t global_args;$/;"	v
global_args_read_blif_t	types.h	/^typedef struct global_args_read_blif_t_t global_args_read_blif_t;$/;"	t	typeref:struct:global_args_read_blif_t_t
global_args_t	types.h	/^typedef struct global_args_t_t global_args_t;$/;"	t	typeref:struct:global_args_t_t
global_args_t_t	types.h	/^struct global_args_t_t$/;"	s
global_param_table_sc	netlist_create_from_ast.c	/^STRING_CACHE *global_param_table_sc;$/;"	v
gnd_node	types.h	/^	nnode_t *gnd_node;$/;"	m	struct:netlist_t_t
graphVizOutputAst	parse_making_ast.c	/^void graphVizOutputAst(char* path, ast_node_t *top)$/;"	f
graphVizOutputAst_traverse_node	parse_making_ast.c	/^void graphVizOutputAst_traverse_node(FILE *fp, ast_node_t *node, ast_node_t *from, int from_num)$/;"	f
graphVizOutputCombinationalNet	netlist_visualizer.c	/^void graphVizOutputCombinationalNet(char* path, char* name, short marker_value, nnode_t *current_node)$/;"	f
graphVizOutputNetlist	netlist_visualizer.c	/^void graphVizOutputNetlist(char* path, char* name, short marker_value, netlist_t *netlist)$/;"	f
graphVizOutputPreproc	parse_making_ast.c	/^void graphVizOutputPreproc(FILE *yyin, char* path, char *file)$/;"	f
graphcrunch_output	output_graphcrunch_format.c	/^void graphcrunch_output(char* path, char* name, short marker_value, netlist_t *netlist)$/;"	f
hard_block_model	read_blif.c	/^} hard_block_model;$/;"	t	typeref:struct:__anon6	file:
hard_block_models	read_blif.c	/^} hard_block_models;$/;"	t	typeref:struct:__anon7	file:
hard_block_names	hard_blocks.c	/^STRING_CACHE *hard_block_names = NULL;$/;"	v
hard_block_pins	read_blif.c	/^} hard_block_pins;$/;"	t	typeref:struct:__anon4	file:
hard_block_port_direction	hard_blocks.c	/^hard_block_port_direction(t_model *hb, char *pname)$/;"	f
hard_block_port_size	hard_blocks.c	/^hard_block_port_size(t_model *hb, char *pname)$/;"	f
hard_block_ports	read_blif.c	/^} hard_block_ports;$/;"	t	typeref:struct:__anon5	file:
hard_multipliers	multipliers.c	/^t_model *hard_multipliers = NULL;$/;"	v
hard_node_name	node_creation_library.c	/^char *hard_node_name(nnode_t *node, char *instance_name_prefix, char *hb_name, char *hb_inst)$/;"	f
hashtable_node_t	hashtable.h	26;"	d
hashtable_node_t_t	hashtable.h	/^struct hashtable_node_t_t$/;"	s
hashtable_t	hashtable.h	25;"	d
hashtable_t_t	hashtable.h	/^struct hashtable_t_t$/;"	s
hb_port	types.h	/^	void *hb_port;$/;"	m	struct:ast_node_t_t
head	queue.h	/^	queue_node_t *head;$/;"	m	struct:queue_t_t
high_level_block	types.h	/^	char *high_level_block;$/;"	m	struct:global_args_t_t
high_number	types.h	/^	int high_number;$/;"	m	struct:ast_node_t_t
hook_up_nets	read_blif.c	/^void hook_up_nets(hashtable_t *output_nets_hash)$/;"	f
hook_up_node	read_blif.c	/^void hook_up_node(nnode_t *node, hashtable_t *output_nets_hash)$/;"	f
hookup_hb_input_pins_from_signal_list	netlist_utils.c	/^void hookup_hb_input_pins_from_signal_list(nnode_t *node, int n_start_idx, signal_list_t* input_list, int il_start_idx, int width, netlist_t *netlist) $/;"	f
hookup_input_pins_from_signal_list	netlist_utils.c	/^void hookup_input_pins_from_signal_list(nnode_t *node, int n_start_idx, signal_list_t* input_list, int il_start_idx, int width, netlist_t *netlist) $/;"	f
hookup_output_pins_from_signal_list	netlist_utils.c	/^void hookup_output_pins_from_signal_list(nnode_t *node, int n_start_idx, signal_list_t* output_list, int ol_start_idx, int width) $/;"	f
id_name	verilog_bison.c	/^	char *id_name;$/;"	m	union:YYSTYPE	file:
id_name	verilog_bison.h	/^	char *id_name;$/;"	m	union:YYSTYPE
identifier	types.h	/^		char *identifier;$/;"	m	union:ast_node_t_t::__anon18
ids	types.h	/^} ids;$/;"	t	typeref:enum:__anon17
implicit_memories	implicit_memory.h	/^hashtable_t *implicit_memories;$/;"	v
implicit_memory	implicit_memory.h	/^} implicit_memory;$/;"	t	typeref:struct:__anon1
implicit_memory_inputs	implicit_memory.h	/^hashtable_t *implicit_memory_inputs;$/;"	v
in_queue	types.h	/^	int in_queue; \/\/ Flag used by the simulator to avoid double queueing.$/;"	m	struct:nnode_t_t
included_files	verilog_preprocessor.h	/^	veri_include **included_files;$/;"	m	struct:veri_Includes
included_from	verilog_preprocessor.h	/^	struct veri_include *included_from;$/;"	m	struct:veri_include	typeref:struct:veri_include::veri_include
index	read_blif.c	/^	hashtable_t *index;$/;"	m	struct:__anon4	file:
index	read_blif.c	/^	hashtable_t *index;$/;"	m	struct:__anon5	file:
index	read_blif.c	/^	hashtable_t *index;$/;"	m	struct:__anon7	file:
index	types.h	/^			int index;$/;"	m	struct:ast_node_t_t::__anon18::__anon22
index_names	read_blif.c	/^hashtable_t *index_names(char **names, int count)$/;"	f
index_pin_name_list	simulate_blif.c	/^hashtable_t *index_pin_name_list(pin_names *list)$/;"	f
info_ast_visit_t	types.h	/^typedef struct info_ast_visit_t_t info_ast_visit_t;$/;"	t	typeref:struct:info_ast_visit_t_t
info_ast_visit_t_t	types.h	/^struct info_ast_visit_t_t$/;"	s
init_cascade_adder	multipliers.c	/^void init_cascade_adder(nnode_t *node, nnode_t *a, int b)$/;"	f
init_implicit_memory_index	implicit_memory.c	/^void init_implicit_memory_index()$/;"	f
init_mult_distribution	multipliers.c	/^void init_mult_distribution()$/;"	f
init_parser	parse_making_ast.c	/^void init_parser()$/;"	f
init_parser_for_file	parse_making_ast.c	/^void init_parser_for_file()$/;"	f
init_signal_list	netlist_utils.c	/^signal_list_t *init_signal_list()$/;"	f
init_split_multiplier	multipliers.c	/^void init_split_multiplier(nnode_t *node, nnode_t *ptr, int offa, int a, int offb, int b)$/;"	f
init_veri_preproc	verilog_preprocessor.c	/^int init_veri_preproc()$/;"	f
initialize_pin	simulate_blif.c	/^void initialize_pin(npin_t *pin)$/;"	f
initialize_probabilities	activity_estimation.c	/^void initialize_probabilities(char *input_file, netlist_t *netlist)$/;"	f
input_nets_sc	netlist_create_from_ast.c	/^STRING_CACHE *input_nets_sc;$/;"	v
input_pins	types.h	/^	npin_t **input_pins; \/\/ the input pins$/;"	m	struct:nnode_t_t
input_port_sizes	types.h	/^	int *input_port_sizes; \/\/ info about the input ports$/;"	m	struct:nnode_t_t
input_ports	read_blif.c	/^	hard_block_ports *input_ports;$/;"	m	struct:__anon6	file:
inputs	read_blif.c	/^	hard_block_pins *inputs;$/;"	m	struct:__anon6	file:
insert_pin_into_line	simulate_blif.c	/^void insert_pin_into_line(npin_t *pin, int pin_number, line_t *line, int type)$/;"	f
instantiate_EQUAL	partial_map.c	/^void instantiate_EQUAL(nnode_t *node, short type, short mark, netlist_t *netlist)$/;"	f
instantiate_GE	partial_map.c	/^void instantiate_GE(nnode_t *node, short type, short mark, netlist_t *netlist)$/;"	f
instantiate_GT	partial_map.c	/^void instantiate_GT(nnode_t *node, short type, short mark, netlist_t *netlist)$/;"	f
instantiate_add_w_carry	partial_map.c	/^void instantiate_add_w_carry(nnode_t *node, short mark, netlist_t *netlist)$/;"	f
instantiate_bitwise_logic	partial_map.c	/^void instantiate_bitwise_logic(nnode_t *node, operation_list op, short mark, netlist_t *netlist)$/;"	f
instantiate_bitwise_reduction	partial_map.c	/^void instantiate_bitwise_reduction(nnode_t *node, operation_list op, short mark, netlist_t *netlist)$/;"	f
instantiate_buffer	partial_map.c	/^void instantiate_buffer(nnode_t *node, short mark, netlist_t *netlist)$/;"	f
instantiate_hard_block	hard_blocks.c	/^instantiate_hard_block(nnode_t *node, short mark, netlist_t *netlist)$/;"	f
instantiate_hard_multiplier	multipliers.c	/^void instantiate_hard_multiplier(nnode_t *node, short mark, netlist_t *netlist)$/;"	f
instantiate_logical_logic	partial_map.c	/^void instantiate_logical_logic(nnode_t *node, operation_list op, short mark, netlist_t *netlist)$/;"	f
instantiate_memory	simulate_blif.c	/^void instantiate_memory(nnode_t *node, int data_width, int addr_width)$/;"	f
instantiate_multi_port_mux	partial_map.c	/^void instantiate_multi_port_mux(nnode_t *node, short mark, netlist_t *netlist)$/;"	f
instantiate_not_logic	partial_map.c	/^void instantiate_not_logic(nnode_t *node, short mark, netlist_t *netlist)$/;"	f
instantiate_shift_left_or_right	partial_map.c	/^void instantiate_shift_left_or_right(nnode_t *node, short type, short mark, netlist_t *netlist)$/;"	f
instantiate_simple_soft_multiplier	multipliers.c	/^void instantiate_simple_soft_multiplier(nnode_t *node, short mark, netlist_t *netlist)$/;"	f
instantiate_soft_dual_port_ram	memories.c	/^void instantiate_soft_dual_port_ram(nnode_t *node, short mark, netlist_t *netlist)$/;"	f
instantiate_soft_logic_ram	partial_map.c	/^void instantiate_soft_logic_ram(nnode_t *node, short mark, netlist_t *netlist)$/;"	f
instantiate_soft_single_port_ram	memories.c	/^void instantiate_soft_single_port_ram(nnode_t *node, short mark, netlist_t *netlist)$/;"	f
instantiate_sub_w_carry	partial_map.c	/^void instantiate_sub_w_carry(nnode_t *node, short mark, netlist_t *netlist)$/;"	f
instantiate_unary_sub	partial_map.c	/^void instantiate_unary_sub(nnode_t *node, short mark, netlist_t *netlist)$/;"	f
internal_netlist	types.h	/^	netlist_t* internal_netlist; \/\/ this is a point of having a subgraph in a node$/;"	m	struct:nnode_t_t
internal_nodes	types.h	/^	nnode_t** internal_nodes;$/;"	m	struct:netlist_t_t
is_adder	types.h	/^	char is_adder;$/;"	m	struct:signal_list_t_t
is_ast_dp_ram	memories.c	/^char is_ast_dp_ram(ast_node_t *node)$/;"	f
is_ast_sp_ram	memories.c	/^char is_ast_sp_ram(ast_node_t *node)$/;"	f
is_binary_string	odin_util.c	/^int is_binary_string(char *string)$/;"	f
is_clock_node	simulate_blif.c	/^inline int is_clock_node(nnode_t *node)$/;"	f
is_constant	types.h	/^	short is_constant;$/;"	m	struct:info_ast_visit_t_t
is_constant_folded	types.h	/^	short is_constant_folded;$/;"	m	struct:info_ast_visit_t_t
is_decimal_string	odin_util.c	/^int is_decimal_string(char *string)$/;"	f
is_default	types.h	/^	char is_default; \/\/ The pin is feeding a mux from logic representing an else or default.$/;"	m	struct:npin_t_t
is_dp_ram	memories.c	/^char is_dp_ram(nnode_t *node)$/;"	f
is_empty	hashtable.h	/^	int    (*is_empty)           (hashtable_t *h);$/;"	m	struct:hashtable_t_t
is_empty	queue.h	/^	int    (*is_empty)   (queue_t *q);$/;"	m	struct:queue_t_t
is_even_cycle	simulate_blif.c	/^inline int is_even_cycle(int cycle)$/;"	f
is_hex_string	odin_util.c	/^int is_hex_string(char *string)$/;"	f
is_implied	types.h	/^	char is_implied; \/\/ This signal is implied.$/;"	m	struct:npin_t_t
is_inout	types.h	/^			short is_inout;$/;"	m	struct:ast_node_t_t::__anon18::__anon21
is_input	types.h	/^			short is_input;$/;"	m	struct:ast_node_t_t::__anon18::__anon21
is_instantiated	types.h	/^			short is_instantiated;$/;"	m	struct:ast_node_t_t::__anon18::__anon22
is_memory	types.h	/^	char is_memory;$/;"	m	struct:signal_list_t_t
is_node_complete	simulate_blif.c	/^int is_node_complete(nnode_t* node, int cycle)$/;"	f
is_node_ready	simulate_blif.c	/^int is_node_ready(nnode_t* node, int cycle)$/;"	f
is_octal_string	odin_util.c	/^int is_octal_string(char *string)$/;"	f
is_output	types.h	/^			short is_output;$/;"	m	struct:ast_node_t_t::__anon18::__anon21
is_parameter	types.h	/^			short is_parameter;$/;"	m	struct:ast_node_t_t::__anon18::__anon21
is_port	types.h	/^			short is_port;$/;"	m	struct:ast_node_t_t::__anon18::__anon21
is_posedge	simulate_blif.c	/^int is_posedge(npin_t *pin, int cycle)$/;"	f
is_reg	types.h	/^			short is_reg;$/;"	m	struct:ast_node_t_t::__anon18::__anon21
is_sp_ram	memories.c	/^char is_sp_ram(nnode_t *node)$/;"	f
is_string_of_radix	odin_util.c	/^int is_string_of_radix(char *string, int radix)$/;"	f
is_valid_implicit_memory_reference_ast	implicit_memory.c	/^char is_valid_implicit_memory_reference_ast(char *instance_name_prefix, ast_node_t *node)$/;"	f
is_vector	simulate_blif.c	/^int is_vector(char *buffer)$/;"	f
is_wire	types.h	/^			short is_wire;$/;"	m	struct:ast_node_t_t::__anon18::__anon21
item	hashtable.h	/^	void *item;$/;"	m	struct:hashtable_node_t_t
item	queue.h	/^	void *item;$/;"	m	struct:queue_node_t_t
iterate_memories	memories.c	/^void iterate_memories(netlist_t *netlist)$/;"	f
iterate_multipliers	multipliers.c	/^void iterate_multipliers(netlist_t *netlist)$/;"	f
join_nets	netlist_utils.c	/^void join_nets(nnet_t *join_to_net, nnet_t* other_net)$/;"	f
key	hashtable.h	/^	void *key;	$/;"	m	struct:hashtable_node_t_t
key_length	hashtable.h	/^	size_t key_length;  $/;"	m	struct:hashtable_node_t_t
last_tag	high_level_data.c	/^int last_tag;$/;"	v
levelize_and_check_for_combinational_loop_and_liveness	netlist_check.c	/^void levelize_and_check_for_combinational_loop_and_liveness(short ast_based, netlist_t *netlist)$/;"	f
levelize_backwards	netlist_check.c	/^void levelize_backwards(netlist_t *netlist)$/;"	f
levelize_backwards_clean_checking_for_liveness	netlist_check.c	/^void levelize_backwards_clean_checking_for_liveness(short ast_based, netlist_t *netlist)$/;"	f
levelize_forwards	netlist_check.c	/^void levelize_forwards(netlist_t *netlist)$/;"	f
levelize_forwards_clean_checking_for_combo_loop_and_liveness	netlist_check.c	/^void levelize_forwards_clean_checking_for_combo_loop_and_liveness(short ast_based, netlist_t *netlist)$/;"	f
line	verilog_preprocessor.h	/^	int	line;$/;"	m	struct:veri_include
line	verilog_preprocessor.h	/^	int line;$/;"	m	struct:veri_define
line_has_unknown_pin	simulate_blif.c	/^int line_has_unknown_pin(line_t *line, int cycle)$/;"	f
line_number	types.h	/^	int line_number;$/;"	m	struct:ast_node_t_t
line_t	simulate_blif.h	/^} line_t;$/;"	t	typeref:struct:__anon9
linenum	read_netlist.c	/^int linenum;$/;"	v
lines	simulate_blif.h	/^	line_t **lines;$/;"	m	struct:__anon10
lines_t	simulate_blif.h	/^} lines_t;$/;"	t	typeref:struct:__anon10
list_of_file_names	types.h	/^	char **list_of_file_names;$/;"	m	struct:config_t_t
local_clock_found	netlist_create_from_ast.c	/^short local_clock_found;$/;"	v
local_clock_idx	netlist_create_from_ast.c	/^int local_clock_idx;$/;"	v
local_clock_list	netlist_create_from_ast.c	/^signal_list_t *local_clock_list;$/;"	v
local_symbol_table	netlist_create_from_ast.c	/^ast_node_t** local_symbol_table;$/;"	v
local_symbol_table_sc	netlist_create_from_ast.c	/^STRING_CACHE *local_symbol_table_sc;$/;"	v
look_for_clocks	netlist_create_from_ast.c	/^void look_for_clocks(netlist_t *netlist)$/;"	f
lookup_implicit_memory	implicit_memory.c	/^implicit_memory *lookup_implicit_memory(char *instance_name_prefix, char *identifier)$/;"	f
lookup_implicit_memory_input	implicit_memory.c	/^implicit_memory *lookup_implicit_memory_input(char *name)$/;"	f
lookup_implicit_memory_reference_ast	implicit_memory.c	/^implicit_memory *lookup_implicit_memory_reference_ast(char *instance_name_prefix, ast_node_t *node)$/;"	f
main	odin_ii.c	/^int main(int argc, char **argv)$/;"	f
make_1port_gate	node_creation_library.c	/^nnode_t *make_1port_gate(operation_list type, int width_input, int width_output, nnode_t *node, short mark)$/;"	f
make_1port_logic_gate	node_creation_library.c	/^nnode_t *make_1port_logic_gate(operation_list type, int width, nnode_t *node, short mark)$/;"	f
make_1port_logic_gate_with_inputs	node_creation_library.c	/^nnode_t *make_1port_logic_gate_with_inputs(operation_list type, int width, signal_list_t *pin_list, nnode_t *node, short mark)$/;"	f
make_2port_gate	node_creation_library.c	/^nnode_t *make_2port_gate(operation_list type, int width_port1, int width_port2, int width_output, nnode_t *node, short mark)$/;"	f
make_3port_gate	node_creation_library.c	/^nnode_t *make_3port_gate(operation_list type, int width_port1, int width_port2, int width_port3, int width_output, nnode_t *node, short mark)$/;"	f
make_concat_into_list_of_strings	ast_util.c	/^void make_concat_into_list_of_strings(ast_node_t *concat_top, char *instance_name_prefix)$/;"	f
make_full_ref_name	odin_util.c	/^char *make_full_ref_name(char *previous, char *module_name, char *module_instance_name, char *signal_name, long bit)$/;"	f
make_module_param_name	ast_util.c	/^char *make_module_param_name(ast_node_t *module_param_list, char *module_name)$/;"	f
make_mult_block	node_creation_library.c	/^nnode_t *make_mult_block(nnode_t *node, short mark)$/;"	f
make_not_gate	node_creation_library.c	/^nnode_t *make_not_gate(nnode_t *node, short mark)$/;"	f
make_not_gate_with_input	node_creation_library.c	/^nnode_t *make_not_gate_with_input(npin_t *input_pin, nnode_t *node, short mark)$/;"	f
make_output_pins_for_existing_node	netlist_utils.c	/^signal_list_t *make_output_pins_for_existing_node(nnode_t* node, int width)$/;"	f
make_signal_name	odin_util.c	/^char *make_signal_name(char *signal_name, int bit)$/;"	f
make_simple_name	odin_util.c	/^char *make_simple_name(char *input, char *flatten_string, char flatten_char)$/;"	f
make_string_based_on_id	odin_util.c	/^char *make_string_based_on_id(nnode_t *node)$/;"	f
mapping	types.h	/^	char *mapping;    \/\/ name of mapped port from hard block$/;"	m	struct:npin_t_t
markAndProcessSymbolListWith	parse_making_ast.c	/^ast_node_t *markAndProcessSymbolListWith(ids id, ast_node_t *symbol_list)$/;"	f
mark_clock_node	netlist_utils.c	/^mark_clock_node ($/;"	f
max_number_of_pins	simulate_blif.h	/^	int max_number_of_pins;$/;"	m	struct:__anon9
me	types.h	/^	ast_node_t *me;$/;"	m	struct:info_ast_visit_t_t
memory_data	types.h	/^	signed char *memory_data;$/;"	m	struct:nnode_t_t
memory_instances	memories.c	/^struct s_linked_vptr *memory_instances = NULL;$/;"	v	typeref:struct:s_linked_vptr
memory_port_size_list	memories.c	/^struct s_linked_vptr *memory_port_size_list = NULL;$/;"	v	typeref:struct:s_linked_vptr
min_hard_multiplier	types.h	/^	int min_hard_multiplier; \/\/ threshold from hard to soft logic$/;"	m	struct:config_t_t
min_mult	multipliers.c	/^int min_mult = 0;$/;"	v
mod	string_cache.h	/^	long mod;$/;"	m	struct:__anon13
models	read_blif.c	/^	hard_block_model **models;$/;"	m	struct:__anon7	file:
module	types.h	/^		} module;$/;"	m	union:ast_node_t_t::__anon18	typeref:struct:ast_node_t_t::__anon18::__anon22
module_instantiations_instance	parse_making_ast.c	/^ast_node_t **module_instantiations_instance;$/;"	v
module_instantiations_instance	types.h	/^			ast_node_t **module_instantiations_instance;$/;"	m	struct:ast_node_t_t::__anon18::__anon22
module_names_to_idx	parse_making_ast.c	/^STRING_CACHE *module_names_to_idx;$/;"	v
modules_inputs_sc	parse_making_ast.c	/^STRING_CACHE *modules_inputs_sc;$/;"	v
modules_outputs_sc	parse_making_ast.c	/^STRING_CACHE *modules_outputs_sc;$/;"	v
move_input_pin	netlist_utils.c	/^void move_input_pin(nnode_t *node, int old_idx, int new_idx)$/;"	f
move_output_pin	netlist_utils.c	/^void move_output_pin(nnode_t *node, int old_idx, int new_idx)$/;"	f
mul	string_cache.h	/^	long mul;$/;"	m	struct:__anon13
mult_list	multipliers.c	/^struct s_linked_vptr *mult_list = NULL;$/;"	v	typeref:struct:s_linked_vptr
mult_padding	types.h	/^	int mult_padding; \/\/ setting how multipliers are padded to fit fixed size$/;"	m	struct:config_t_t
multiply_arrays	simulate_blif.c	/^int *multiply_arrays(int *a, int a_length, int *b, int b_length)$/;"	f
mults	multipliers.c	/^int *mults = NULL;$/;"	v
my_malloc_struct	odin_util.c	/^void *my_malloc_struct(size_t bytes_to_alloc)$/;"	f
my_power	odin_util.c	/^long long int my_power(long long int x, long long int y)$/;"	f
name	implicit_memory.h	/^	char *name;$/;"	m	struct:__anon1
name	memories.h	/^	char *name;$/;"	m	struct:s_memory_port_sizes
name	read_blif.c	/^	char *name;$/;"	m	struct:__anon6	file:
name	simulate_blif.h	/^	char *name;$/;"	m	struct:__anon9
name	types.h	/^	char *name; \/\/ name for the net$/;"	m	struct:nnet_t_t
name	types.h	/^	char *name; \/\/ unique name of a node$/;"	m	struct:nnode_t_t
name	types.h	/^	char *name;$/;"	m	struct:npin_t_t
names	read_blif.c	/^	char **names;$/;"	m	struct:__anon4	file:
names	read_blif.c	/^	char **names;$/;"	m	struct:__anon5	file:
net	types.h	/^	nnet_t *net;      \/\/ related net$/;"	m	struct:npin_t_t
net_data	types.h	/^	void *net_data;$/;"	m	struct:nnet_t_t
net_file	read_netlist.c	/^static FILE *net_file;$/;"	v	file:
net_node	types.h	/^	void *net_node;$/;"	m	struct:ast_node_t_t
netlist_create_line_number	netlist_create_from_ast.c	/^int netlist_create_line_number = -2;$/;"	v
netlist_expand_ast_of_module	netlist_create_from_ast.c	/^signal_list_t *netlist_expand_ast_of_module(ast_node_t* node, char *instance_name_prefix)$/;"	f
netlist_one_string	read_netlist.c	/^char *netlist_one_string = "ONE_VCC_CNS";$/;"	v
netlist_optimizations_top	netlist_optimizations.c	/^void netlist_optimizations_top(netlist_t *netlist)$/;"	f
netlist_stats	netlist_stats.c	/^void netlist_stats(netlist_t *netlist, char *path, char *name)$/;"	f
netlist_stats_t	types.h	/^typedef struct netlist_stats_t_t netlist_stats_t;$/;"	t	typeref:struct:netlist_stats_t_t
netlist_stats_t_t	types.h	/^struct netlist_stats_t_t$/;"	s
netlist_t	types.h	/^typedef struct netlist_t_t netlist_t;$/;"	t	typeref:struct:netlist_t_t
netlist_t_t	types.h	/^struct netlist_t_t$/;"	s
netlist_zero_string	read_netlist.c	/^char *netlist_zero_string = "ZERO_GND_ZERO";$/;"	v
nets_sc	types.h	/^	STRING_CACHE *nets_sc;$/;"	m	struct:netlist_t_t
newAlways	parse_making_ast.c	/^ast_node_t *newAlways(ast_node_t *delay_control, ast_node_t *statement, int line_number)$/;"	f
newArrayRef	parse_making_ast.c	/^ast_node_t *newArrayRef(char *id, ast_node_t *expression, int line_number)$/;"	f
newAssign	parse_making_ast.c	/^ast_node_t *newAssign(ast_node_t *statement, int line_number)$/;"	f
newBinaryOperation	parse_making_ast.c	/^ast_node_t *newBinaryOperation(operation_list op_id, ast_node_t *expression1, ast_node_t *expression2, int line_number)$/;"	f
newBlocking	parse_making_ast.c	/^ast_node_t *newBlocking(ast_node_t *expression1, ast_node_t *expression2, int line_number)$/;"	f
newCase	parse_making_ast.c	/^ast_node_t *newCase(ast_node_t *compare_expression, ast_node_t *case_list, int line_number)$/;"	f
newCaseItem	parse_making_ast.c	/^ast_node_t *newCaseItem(ast_node_t *expression, ast_node_t *statement, int line_number)$/;"	f
newConstant	parse_making_ast.c	/^void newConstant(char *id, char *number, int line_number)$/;"	f
newDefaultCase	parse_making_ast.c	/^ast_node_t *newDefaultCase(ast_node_t *statement, int line_number)$/;"	f
newDefparam	parse_making_ast.c	/^void newDefparam(char *inst, char *param, char *val, int line_number)$/;"	f
newGate	parse_making_ast.c	/^ast_node_t *newGate(operation_list op_id, ast_node_t *gate_instance, int line_number)$/;"	f
newGateInstance	parse_making_ast.c	/^ast_node_t *newGateInstance(char* gate_instance_name, ast_node_t *expression1, ast_node_t *expression2, ast_node_t *expression3, int line_number)$/;"	f
newHardBlockInstance	parse_making_ast.c	/^ast_node_t *newHardBlockInstance(char* module_ref_name, ast_node_t *module_named_instance, int line_number)$/;"	f
newIf	parse_making_ast.c	/^ast_node_t *newIf(ast_node_t *compare_expression, ast_node_t *true_expression, ast_node_t *false_expression, int line_number)$/;"	f
newIfQuestion	parse_making_ast.c	/^ast_node_t *newIfQuestion(ast_node_t *compare_expression, ast_node_t *true_expression, ast_node_t *false_expression, int line_number)$/;"	f
newList	parse_making_ast.c	/^ast_node_t *newList(ids node_type, ast_node_t *child)$/;"	f
newListReplicate	parse_making_ast.c	/^ast_node_t *newListReplicate(ast_node_t *exp, ast_node_t *child )$/;"	f
newList_entry	parse_making_ast.c	/^ast_node_t *newList_entry(ast_node_t *list, ast_node_t *child)$/;"	f
newModule	parse_making_ast.c	/^ast_node_t *newModule(char* module_name, ast_node_t *list_of_ports, ast_node_t *list_of_module_items, int line_number)$/;"	f
newModuleConnection	parse_making_ast.c	/^ast_node_t *newModuleConnection(char* id, ast_node_t *expression, int line_number)$/;"	f
newModuleInstance	parse_making_ast.c	/^ast_node_t *newModuleInstance(char* module_ref_name, ast_node_t *module_named_instance, int line_number)$/;"	f
newModuleNamedInstance	parse_making_ast.c	/^ast_node_t *newModuleNamedInstance(char* unique_name, ast_node_t *module_connect_list, ast_node_t *module_parameter_list, int line_number)$/;"	f
newModuleParameter	parse_making_ast.c	/^ast_node_t *newModuleParameter(char* id, ast_node_t *expression, int line_number)$/;"	f
newNegedgeSymbol	parse_making_ast.c	/^ast_node_t *newNegedgeSymbol(char *symbol, int line_number)$/;"	f
newNonBlocking	parse_making_ast.c	/^ast_node_t *newNonBlocking(ast_node_t *expression1, ast_node_t *expression2, int line_number)$/;"	f
newNumberNode	parse_making_ast.c	/^ast_node_t *newNumberNode(char *num, int line_number)$/;"	f
newPosedgeSymbol	parse_making_ast.c	/^ast_node_t *newPosedgeSymbol(char *symbol, int line_number)$/;"	f
newRangeRef	parse_making_ast.c	/^ast_node_t *newRangeRef(char *id, ast_node_t *expression1, ast_node_t *expression2, int line_number)$/;"	f
newSymbolNode	parse_making_ast.c	/^ast_node_t *newSymbolNode(char *id, int line_number)$/;"	f
newUnaryOperation	parse_making_ast.c	/^ast_node_t *newUnaryOperation(operation_list op_id, ast_node_t *expression, int line_number)$/;"	f
newVarDeclare	parse_making_ast.c	/^ast_node_t *newVarDeclare(char* symbol, ast_node_t *expression1, ast_node_t *expression2, ast_node_t *expression3, ast_node_t *expression4, ast_node_t *value, int line_number)$/;"	f
next	hashtable.h	/^	hashtable_node_t *next;$/;"	m	struct:hashtable_node_t_t
next	memories.h	/^	struct s_memory *next;$/;"	m	struct:s_memory	typeref:struct:s_memory::s_memory
next	multipliers.h	/^	struct s_multiplier *next;$/;"	m	struct:s_multiplier	typeref:struct:s_multiplier::s_multiplier
next	queue.h	/^	queue_node_t *next;$/;"	m	struct:queue_node_t_t
next	verilog_preprocessor.h	/^	struct veri_flag_node *next;$/;"	m	struct:veri_flag_node	typeref:struct:veri_flag_node::veri_flag_node
next_module	parse_making_ast.c	/^void next_module()$/;"	f
next_parsed_verilog_file	parse_making_ast.c	/^void next_parsed_verilog_file(ast_node_t *file_items_list)$/;"	f
next_string	string_cache.h	/^	long *next_string;$/;"	m	struct:__anon13
nnet_t	types.h	/^typedef struct nnet_t_t nnet_t;$/;"	t	typeref:struct:nnet_t_t
nnet_t_t	types.h	/^struct nnet_t_t$/;"	s
nnode_t	types.h	/^typedef struct nnode_t_t nnode_t;$/;"	t	typeref:struct:nnode_t_t
nnode_t_t	types.h	/^struct nnode_t_t$/;"	s
node	implicit_memory.h	/^	nnode_t *node;$/;"	m	struct:__anon1
node	types.h	/^	nnode_t *node;    \/\/ related node$/;"	m	struct:npin_t_t
node	verilog_bison.c	/^	ast_node_t *node;$/;"	m	union:YYSTYPE	file:
node	verilog_bison.h	/^	ast_node_t *node;$/;"	m	union:YYSTYPE
node_data	types.h	/^	void *node_data; \/\/ this is a point where you can add additional data for your optimization or technique$/;"	m	struct:nnode_t_t
node_name	node_creation_library.c	/^char *node_name(nnode_t *node, char *instance_name_prefix)$/;"	f
node_name_based_on_op	node_creation_library.c	/^char *node_name_based_on_op(nnode_t *node)$/;"	f
nodes_sc	types.h	/^	STRING_CACHE *nodes_sc;$/;"	m	struct:netlist_t_t
npin_t	types.h	/^typedef struct npin_t_t npin_t;$/;"	t	typeref:struct:npin_t_t
npin_t_t	types.h	/^struct npin_t_t$/;"	s
num_at_backward_level	types.h	/^	int* num_at_backward_level;$/;"	m	struct:netlist_t_t
num_at_forward_level	types.h	/^	int* num_at_forward_level;$/;"	m	struct:netlist_t_t
num_at_sequential_level	types.h	/^	int* num_at_sequential_level;$/;"	m	struct:netlist_t_t
num_at_sequential_level_combinational_termination_node	types.h	/^	int* num_at_sequential_level_combinational_termination_node;$/;"	m	struct:netlist_t_t
num_backward_levels	types.h	/^	int num_backward_levels;$/;"	m	struct:netlist_t_t
num_bit_strings	types.h	/^			int num_bit_strings;$/;"	m	struct:ast_node_t_t::__anon18::__anon23
num_children	simulate_blif.h	/^	int    *num_children;      \/\/ Number of children per stage.$/;"	m	struct:__anon11
num_children	types.h	/^	int num_children;$/;"	m	struct:ast_node_t_t
num_clocks	types.h	/^	int num_clocks;$/;"	m	struct:netlist_t_t
num_combinational_shape_for_sequential_level	types.h	/^	int *num_combinational_shape_for_sequential_level;$/;"	m	struct:netlist_stats_t_t
num_connections	simulate_blif.h	/^	int    num_connections;    \/\/ The sum of the number of children found under every node.$/;"	m	struct:__anon11
num_edges_fi	types.h	/^	long num_edges_fi; \/* without control signals like clocks and gnd and vcc...= to number of fanins from output pins *\/$/;"	m	struct:netlist_stats_t_t
num_edges_fo	types.h	/^	long num_edges_fo; \/* without control signals like clocks and gnd and vcc...= to number of fanouts from output pins *\/$/;"	m	struct:netlist_stats_t_t
num_fanin_distribution	types.h	/^	int num_fanin_distribution;$/;"	m	struct:netlist_stats_t_t
num_fanout_distribution	types.h	/^	int num_fanout_distribution;$/;"	m	struct:netlist_stats_t_t
num_fanout_pins	types.h	/^	int num_fanout_pins; \/\/ the list size of pins$/;"	m	struct:nnet_t_t
num_fanouts_on_output_pin	netlist_stats.c	/^int num_fanouts_on_output_pin(nnode_t *node, int output_pin_idx)$/;"	f
num_ff_nodes	types.h	/^	int num_ff_nodes;$/;"	m	struct:netlist_stats_t_t
num_ff_nodes	types.h	/^	int num_ff_nodes;$/;"	m	struct:netlist_t_t
num_forward_levels	types.h	/^	int num_forward_levels;$/;"	m	struct:netlist_t_t
num_input_pins	types.h	/^	int num_input_pins;$/;"	m	struct:nnode_t_t
num_input_port_sizes	types.h	/^	int num_input_port_sizes;$/;"	m	struct:nnode_t_t
num_inputs	types.h	/^	int num_inputs;$/;"	m	struct:netlist_stats_t_t
num_internal_nodes	types.h	/^	int num_internal_nodes;$/;"	m	struct:netlist_t_t
num_list_of_file_names	types.h	/^	int num_list_of_file_names;$/;"	m	struct:config_t_t
num_local_symbol_table	netlist_create_from_ast.c	/^int num_local_symbol_table;$/;"	v
num_logic_nodes	types.h	/^	int num_logic_nodes;$/;"	m	struct:netlist_stats_t_t
num_modules	parse_making_ast.c	/^int num_modules;$/;"	v
num_nodes	simulate_blif.h	/^	int    num_nodes;          \/\/ The total number of nodes.$/;"	m	struct:__anon11
num_nodes	types.h	/^	int num_nodes;$/;"	m	struct:netlist_stats_t_t
num_output_pins	types.h	/^	int num_output_pins;$/;"	m	struct:nnode_t_t
num_output_pins	types.h	/^	long num_output_pins;$/;"	m	struct:netlist_stats_t_t
num_output_port_sizes	types.h	/^	int num_output_port_sizes;$/;"	m	struct:nnode_t_t
num_outputs	types.h	/^	int num_outputs;$/;"	m	struct:netlist_stats_t_t
num_parallel_nodes	simulate_blif.h	/^	int    num_parallel_nodes; \/\/ The number of nodes while will be computed in parallel.$/;"	m	struct:__anon11
num_sequential_level_combinational_termination_nodes	types.h	/^	int num_sequential_level_combinational_termination_nodes;$/;"	m	struct:netlist_t_t
num_sequential_levels	types.h	/^	int num_sequential_levels;$/;"	m	struct:netlist_t_t
num_strings	types.h	/^	int num_strings;$/;"	m	struct:char_list_t_t
num_top_input_nodes	types.h	/^	int num_top_input_nodes;$/;"	m	struct:netlist_t_t
num_top_output_nodes	types.h	/^	int num_top_output_nodes;$/;"	m	struct:netlist_t_t
num_undriven_pins	types.h	/^	int  num_undriven_pins;$/;"	m	struct:nnode_t_t
num_value	verilog_bison.c	/^	char *num_value;$/;"	m	union:YYSTYPE	file:
num_value	verilog_bison.h	/^	char *num_value;$/;"	m	union:YYSTYPE
number	types.h	/^			char *number;$/;"	m	struct:ast_node_t_t::__anon18::__anon19
number	types.h	/^		} number;$/;"	m	union:ast_node_t_t::__anon18	typeref:struct:ast_node_t_t::__anon18::__anon19
number_of_pins	simulate_blif.h	/^	int number_of_pins;$/;"	m	struct:__anon9
oassert	types.h	85;"	d
one_net	types.h	/^	nnet_t *one_net;$/;"	m	struct:netlist_t_t
one_string	netlist_create_from_ast.c	/^char *one_string = "ONE_VCC_CNS";$/;"	v
op	types.h	/^			operation_list op;$/;"	m	struct:ast_node_t_t::__anon18::__anon20
open_source_file	verilog_preprocessor.c	/^FILE* open_source_file(char* filename)$/;"	f
operation	types.h	/^		} operation;$/;"	m	union:ast_node_t_t::__anon18	typeref:struct:ast_node_t_t::__anon18::__anon20
operation_list	types.h	/^} operation_list;$/;"	t	typeref:enum:__anon16
optimizations_on_AST	ast_optimizations.c	/^void optimizations_on_AST(ast_node_t *top)$/;"	f
out	memories.h	/^	signal_list_t *out;$/;"	m	struct:__anon2
out1	memories.h	/^	signal_list_t *out1;$/;"	m	struct:__anon3
out2	memories.h	/^	signal_list_t *out2;$/;"	m	struct:__anon3
out_pins_sc	types.h	/^	STRING_CACHE *out_pins_sc;$/;"	m	struct:netlist_t_t
output_activation_file_ace_and_function_file	activity_estimation.c	/^void output_activation_file_ace_and_function_file(char *output_filename, int lut_size, netlist_t *LUT_netlist, netlist_t *CLUSTER_netlist)$/;"	f
output_added	implicit_memory.h	/^	char output_added;$/;"	m	struct:__anon1
output_ast_graphs	types.h	/^	short output_ast_graphs; \/\/ switch that outputs ast graphs per node for use with GRaphViz tools$/;"	m	struct:config_t_t
output_blif	output_blif.c	/^void output_blif(char *file_name, netlist_t *netlist)$/;"	f
output_blif_pin_connect	output_blif.c	/^void output_blif_pin_connect(nnode_t *node, FILE *out)$/;"	f
output_file	types.h	/^	char *output_file;$/;"	m	struct:global_args_t_t
output_hard_blocks	hard_blocks.c	/^void output_hard_blocks(FILE *out)$/;"	f
output_netlist_graphs	types.h	/^	short output_netlist_graphs; \/\/ switch that outputs netlist graphs per node for use with GraphViz tools$/;"	m	struct:config_t_t
output_nets_sc	netlist_create_from_ast.c	/^STRING_CACHE *output_nets_sc;$/;"	v
output_node	output_blif.c	/^void output_node(nnode_t *node, short traverse_number, FILE *fp)$/;"	f
output_pins	types.h	/^	npin_t **output_pins; \/\/ the output pins$/;"	m	struct:nnode_t_t
output_port_sizes	types.h	/^	int *output_port_sizes; \/\/ info if there is ports$/;"	m	struct:nnode_t_t
output_ports	read_blif.c	/^	hard_block_ports *output_ports;$/;"	m	struct:__anon6	file:
output_preproc_source	types.h	/^	short output_preproc_source; \/\/ switch that outputs the pre-processed source$/;"	m	struct:config_t_t
output_top	outputs.c	/^void output_top(netlist_t *netlist)$/;"	f
output_type	types.h	/^	char *output_type; \/\/ string name of the type of output file$/;"	m	struct:config_t_t
outputs	read_blif.c	/^	hard_block_pins *outputs;$/;"	m	struct:__anon6	file:
pad_dp_memory_width	memories.c	/^void pad_dp_memory_width(nnode_t *node, netlist_t *netlist)$/;"	f
pad_memory_input_port	memories.c	/^void pad_memory_input_port(nnode_t *node, netlist_t *netlist, t_model *model, char *port_name)$/;"	f
pad_memory_output_port	memories.c	/^void pad_memory_output_port(nnode_t *node, netlist_t *netlist, t_model *model, char *port_name)$/;"	f
pad_multiplier	multipliers.c	/^void pad_multiplier(nnode_t *node, netlist_t *netlist)$/;"	f
pad_net	types.h	/^	nnet_t *pad_net;$/;"	m	struct:netlist_t_t
pad_node	types.h	/^	nnode_t *pad_node;$/;"	m	struct:netlist_t_t
pad_sp_memory_width	memories.c	/^void pad_sp_memory_width(nnode_t *node, netlist_t *netlist)$/;"	f
pad_string	netlist_create_from_ast.c	/^char *pad_string = "ZERO_PAD_ZERO";$/;"	v
pad_with_zeros	netlist_create_from_ast.c	/^void pad_with_zeros(ast_node_t* node, signal_list_t *list, int pad_size, char *instance_name_prefix)$/;"	f
parallel_times	simulate_blif.h	/^	double *parallel_times;   \/\/ Parallel execution time values for each stage for tuning.$/;"	m	struct:__anon11
parse_mif_radix	simulate_blif.c	/^int parse_mif_radix(char *radix)$/;"	f
parse_pin_name_list	simulate_blif.c	/^pin_names *parse_pin_name_list(char *list)$/;"	f
parse_test_vector	simulate_blif.c	/^test_vector *parse_test_vector(char *buffer)$/;"	f
parse_to_ast	parse_making_ast.c	/^void parse_to_ast()$/;"	f
partial_map_node	partial_map.c	/^void partial_map_node(nnode_t *node, short traverse_number, netlist_t *netlist)$/;"	f
partial_map_top	partial_map.c	/^void partial_map_top(netlist_t *netlist)$/;"	f
pass	read_netlist.c	/^enum pass { DRIVERS = 0, DRIVEN, STOP };$/;"	g	file:
path	verilog_preprocessor.h	/^	char *path;$/;"	m	struct:veri_include
pin_names	simulate_blif.h	/^} pin_names;$/;"	t	typeref:struct:__anon8
pin_net_idx	types.h	/^	int pin_net_idx;$/;"	m	struct:npin_t_t
pin_node_idx	types.h	/^	int pin_node_idx; \/\/ pin on the node where we're located$/;"	m	struct:npin_t_t
pin_numbers	simulate_blif.h	/^	int    *pin_numbers;$/;"	m	struct:__anon10
pin_numbers	simulate_blif.h	/^	int  *pin_numbers;$/;"	m	struct:__anon9
pins	simulate_blif.h	/^	char **pins;$/;"	m	struct:__anon8
pins	simulate_blif.h	/^	npin_t **pins;$/;"	m	struct:__anon9
pins	types.h	/^	npin_t **pins;	$/;"	m	struct:signal_list_t_t
pop	verilog_preprocessor.c	/^int pop(veri_flag_stack *stack)$/;"	f
pow2	odin_util.c	/^long long int pow2(int to_the_power)$/;"	f
preprocess_mif_file	simulate_blif.c	/^FILE *preprocess_mif_file(FILE *source)$/;"	f
print_ancestry	simulate_blif.c	/^void print_ancestry(nnode_t *bottom_node, int n)$/;"	f
print_netlist_for_checking	print_netlist.c	/^void print_netlist_for_checking (netlist_t *netlist, char *name)$/;"	f
print_netlist_stats	simulate_blif.c	/^void print_netlist_stats(stages *stages, int num_vectors)$/;"	f
print_parse_tokens	types.h	/^	short print_parse_tokens; \/\/ switch that controls whether or not each token is printed during parsing$/;"	m	struct:config_t_t
print_progress_bar	simulate_blif.c	/^int print_progress_bar(double completion, int position, int length, double time)$/;"	f
print_simulation_stats	simulate_blif.c	/^void print_simulation_stats(stages *stages, int num_vectors, double total_time, double simulation_time)$/;"	f
print_time	simulate_blif.c	/^void print_time(double time)$/;"	f
print_update_trace	simulate_blif.c	/^nnode_t *print_update_trace(nnode_t *bottom_node, int cycle)$/;"	f
print_usage	odin_ii.c	/^void print_usage()$/;"	f
push	verilog_preprocessor.c	/^void push(veri_flag_stack *stack, int flag)$/;"	f
queue_node_t	queue.h	26;"	d
queue_node_t_t	queue.h	/^struct queue_node_t_t$/;"	s
queue_t	queue.h	25;"	d
queue_t_t	queue.h	/^struct queue_t_t$/;"	s
rb_create_top_driver_nets	read_blif.c	/^void rb_create_top_driver_nets(char *instance_name_prefix, hashtable_t *output_nets_hash)$/;"	f
rb_create_top_output_nodes	read_blif.c	/^void rb_create_top_output_nodes(FILE *file)$/;"	f
rb_look_for_clocks	read_blif.c	/^void rb_look_for_clocks()$/;"	f
read_bit_map_find_unknown_gate	read_blif.c	/^short read_bit_map_find_unknown_gate(int input_count, nnode_t *node, FILE *file)$/;"	f
read_blif	read_blif.c	/^void read_blif(char * blif_file)$/;"	f
read_config_file	read_xml_config_file.c	/^void read_config_file(char *file_name)$/;"	f
read_debug_switches	read_xml_config_file.c	/^void read_debug_switches(ezxml_t a_node, config_t *config)$/;"	f
read_hard_block_model	read_blif.c	/^hard_block_model *read_hard_block_model(char *name_subckt, hard_block_ports *ports, FILE *file)$/;"	f
read_netlist	read_netlist.c	/^read_netlist ($/;"	f
read_optimizations	read_xml_config_file.c	/^void read_optimizations(ezxml_t a_node, config_t *config)$/;"	f
read_outputs	read_xml_config_file.c	/^void read_outputs(ezxml_t a_node, config_t *config)$/;"	f
read_tokens	read_blif.c	/^int read_tokens (char *buffer, hard_block_models *models, FILE *file, hashtable_t *output_nets_hash)$/;"	f
read_verilog_files	read_xml_config_file.c	/^void read_verilog_files(ezxml_t a_node, config_t *config)$/;"	f
record_mult_distribution	multipliers.c	/^void record_mult_distribution(nnode_t *node)$/;"	f
reduceAST_traverse_node	ast_optimizations.c	/^info_ast_visit_t *reduceAST_traverse_node(ast_node_t *node, ast_node_t *from, int position_idx)$/;"	f
register_hard_blocks	hard_blocks.c	/^void register_hard_blocks()$/;"	f
register_implicit_memory_input	implicit_memory.c	/^void register_implicit_memory_input(char *name, implicit_memory *memory)$/;"	f
related_ast_node	types.h	/^	ast_node_t *related_ast_node; \/\/ the abstract syntax node that made this node$/;"	m	struct:nnode_t_t
remap_input_port_to_memory	memories.c	/^void remap_input_port_to_memory(nnode_t *node, signal_list_t *signals, char *port_name)$/;"	f
remap_output_port_to_memory	memories.c	/^void remap_output_port_to_memory(nnode_t *node, signal_list_t *signals, char *port_name)$/;"	f
remap_pin_to_new_net	netlist_utils.c	/^void remap_pin_to_new_net(npin_t *pin, nnet_t *new_net)$/;"	f
remap_pin_to_new_node	netlist_utils.c	/^void remap_pin_to_new_node(npin_t *pin, nnode_t *new_node, int pin_idx)$/;"	f
remove	hashtable.h	/^	void*  (*remove)             (hashtable_t *h, void *key, size_t key_length);$/;"	m	struct:hashtable_t_t
remove	queue.h	/^	void  *(*remove)     (queue_t *q);$/;"	m	struct:queue_t_t
remove_all	queue.h	/^	void **(*remove_all) (queue_t *q);$/;"	m	struct:queue_t_t
remove_comments	verilog_preprocessor.c	/^FILE *remove_comments(FILE *source)$/;"	f
report_mult_distribution	multipliers.c	/^void report_mult_distribution()$/;"	f
resolve_node	ast_util.c	/^ast_node_t *resolve_node(char *module_name, ast_node_t *node)$/;"	f
ret_veri_definedval	verilog_preprocessor.c	/^char* ret_veri_definedval(char *symbol)$/;"	f
reverse_string	odin_util.c	/^void reverse_string(char *string, int length)$/;"	f
s_memory	memories.h	/^typedef struct s_memory$/;"	s
s_memory_port_sizes	memories.h	/^typedef struct s_memory_port_sizes$/;"	s
s_multiplier	multipliers.h	/^typedef struct s_multiplier$/;"	s
sc_add_string	string_cache.c	/^sc_add_string(STRING_CACHE * sc,$/;"	f
sc_do_alloc	string_cache.c	/^sc_do_alloc(long a,$/;"	f
sc_free_string_cache	string_cache.c	/^sc_free_string_cache(STRING_CACHE * sc)$/;"	f
sc_lookup_string	string_cache.c	/^sc_lookup_string(STRING_CACHE * sc,$/;"	f
sc_new_string_cache	string_cache.c	/^sc_new_string_cache(void)$/;"	f
sc_valid_id	string_cache.c	/^sc_valid_id(STRING_CACHE * sc,$/;"	f
search_clock_name	read_blif.c	/^char* search_clock_name(FILE* file)$/;"	f
sequential_level	types.h	/^	int sequential_level; \/\/ the associated sequential network that the node is in$/;"	m	struct:nnode_t_t
sequential_level_combinational_termination_node	types.h	/^	nnode_t ***sequential_level_combinational_termination_node;$/;"	m	struct:netlist_t_t
sequential_level_nodes	types.h	/^	nnode_t ***sequential_level_nodes;$/;"	m	struct:netlist_t_t
sequential_levelized_dfs	netlist_check.c	/^void sequential_levelized_dfs(short marker_value, netlist_t *netlist)$/;"	f
sequential_terminator	types.h	/^	short sequential_terminator; \/\/ if this combinational node is a terminator for the sequential level (connects to flip-flop or Output pin$/;"	m	struct:nnode_t_t
sequential_times	simulate_blif.h	/^	double *sequential_times; \/\/ Sequential execution time values for each stage for tuning.$/;"	m	struct:__anon11
set_default_optimization_settings	read_xml_config_file.c	/^void set_default_optimization_settings(config_t *config)$/;"	f
set_pin_cycle	simulate_blif.c	/^inline void set_pin_cycle(npin_t *pin, int cycle)$/;"	f
shared_node	types.h	/^	short shared_node;$/;"	m	struct:ast_node_t_t
short	verilog_bison.c	249;"	d	file:
signal_list_t	types.h	/^typedef struct signal_list_t_t signal_list_t;$/;"	t	typeref:struct:signal_list_t_t
signal_list_t_t	types.h	/^struct signal_list_t_t $/;"	s
signature	read_blif.c	/^	char *signature;$/;"	m	struct:__anon5	file:
sim_additional_pins	types.h	/^	char *sim_additional_pins;$/;"	m	struct:global_args_t_t
sim_generate_three_valued_logic	types.h	/^	int sim_generate_three_valued_logic;$/;"	m	struct:global_args_t_t
sim_hold_high	types.h	/^	char *sim_hold_high;$/;"	m	struct:global_args_t_t
sim_hold_low	types.h	/^	char *sim_hold_low;$/;"	m	struct:global_args_t_t
sim_num_test_vectors	types.h	/^	int sim_num_test_vectors;$/;"	m	struct:global_args_t_t
sim_output_both_edges	types.h	/^	int sim_output_both_edges;$/;"	m	struct:global_args_t_t
sim_output_rising_edge	types.h	/^	int sim_output_rising_edge;$/;"	m	struct:global_args_t_t
sim_state_t	types.h	/^typedef struct sim_state_t_t sim_state_t;$/;"	t	typeref:struct:sim_state_t_t
sim_vector_input_file	types.h	/^	char *sim_vector_input_file;$/;"	m	struct:global_args_t_t
sim_vector_output_file	types.h	/^	char *sim_vector_output_file;$/;"	m	struct:global_args_t_t
simulate_block_cycle	types.h	/^	void (*simulate_block_cycle)(int, int, int*, int, int*);$/;"	m	struct:nnode_t_t
simulate_cycle	simulate_blif.c	/^void simulate_cycle(int cycle, stages *s)$/;"	f
simulate_first_cycle	simulate_blif.c	/^stages *simulate_first_cycle(netlist_t *netlist, int cycle, pin_names *p, lines_t *l)$/;"	f
simulate_netlist	simulate_blif.c	/^void simulate_netlist(netlist_t *netlist)$/;"	f
simulation_type	types.h	/^}simulation_type;$/;"	t	typeref:enum:__anon14
single_port_rams	hard_blocks.c	/^t_model *single_port_rams = NULL;$/;"	v
single_port_rams	memories.c	/^t_model *single_port_rams;$/;"	v
size	memories.h	/^	int size;$/;"	m	struct:s_memory_port_sizes
size	string_cache.h	/^	long size;$/;"	m	struct:__anon13
size	types.h	/^			int size;$/;"	m	struct:ast_node_t_t::__anon18::__anon19
size_a	multipliers.h	/^	int size_a;$/;"	m	struct:s_multiplier
size_addr1	memories.h	/^	int size_addr1;$/;"	m	struct:s_memory
size_addr2	memories.h	/^	int size_addr2;$/;"	m	struct:s_memory
size_all_file_items_list	parse_making_ast.c	/^int size_all_file_items_list;$/;"	v
size_b	multipliers.h	/^	int size_b;$/;"	m	struct:s_multiplier
size_block_instantiations	parse_making_ast.c	/^int size_block_instantiations;$/;"	v
size_d1	memories.h	/^	int size_d1;$/;"	m	struct:s_memory
size_d2	memories.h	/^	int size_d2;$/;"	m	struct:s_memory
size_module_instantiations	parse_making_ast.c	/^int size_module_instantiations;$/;"	v
size_module_instantiations	types.h	/^			int size_module_instantiations;$/;"	m	struct:ast_node_t_t::__anon18::__anon22
size_out	multipliers.h	/^	int size_out;$/;"	m	struct:s_multiplier
size_out1	memories.h	/^	int size_out1;$/;"	m	struct:s_memory
size_out2	memories.h	/^	int size_out2;$/;"	m	struct:s_memory
sizes	read_blif.c	/^	int *sizes;$/;"	m	struct:__anon5	file:
skip_reading_bit_map	read_blif.c	/^short static skip_reading_bit_map=FALSE; $/;"	v	file:
soft_logic_memory_depth_threshold	types.h	/^	int soft_logic_memory_depth_threshold;$/;"	m	struct:config_t_t
soft_logic_memory_width_threshold	types.h	/^	int soft_logic_memory_width_threshold;$/;"	m	struct:config_t_t
sort_signal_list_alphabetically	netlist_utils.c	/^void sort_signal_list_alphabetically(signal_list_t *list)$/;"	f
sp_memory_list	memories.c	/^struct s_linked_vptr *sp_memory_list;$/;"	v	typeref:struct:s_linked_vptr
sp_ram_signals	memories.h	/^} sp_ram_signals;$/;"	t	typeref:struct:__anon2
special_blk	read_netlist.c	/^enum special_blk { NORMAL = 0, INPAD, OUTPAD };$/;"	g	file:
split_dp_memory_depth	memories.c	/^void split_dp_memory_depth(nnode_t *node, int split_size)$/;"	f
split_dp_memory_width	memories.c	/^void split_dp_memory_width(nnode_t *node, int target_size)$/;"	f
split_hard_multiplier	types.h	/^	int split_hard_multiplier;$/;"	m	struct:config_t_t
split_list	memories.c	/^struct s_linked_vptr *split_list;$/;"	v	typeref:struct:s_linked_vptr
split_memory_depth	types.h	/^	int split_memory_depth;$/;"	m	struct:config_t_t
split_memory_width	types.h	/^	char split_memory_width;$/;"	m	struct:config_t_t
split_multiplier	multipliers.c	/^void split_multiplier(nnode_t *node, int a0, int b0, int a1, int b1)$/;"	f
split_multiplier_a	multipliers.c	/^void split_multiplier_a(nnode_t *node, int a0, int a1, int b)$/;"	f
split_multiplier_b	multipliers.c	/^void split_multiplier_b(nnode_t *node, int a, int b1, int b0)$/;"	f
split_size	memories.c	/^int split_size = 0;$/;"	v
split_sp_memory_depth	memories.c	/^void split_sp_memory_depth(nnode_t *node, int split_size)$/;"	f
split_sp_memory_width	memories.c	/^void split_sp_memory_width(nnode_t *node, int target_size)$/;"	f
stage_ordered_nodes	simulate_blif.c	/^stages *stage_ordered_nodes(nnode_t **ordered_nodes, int num_ordered_nodes) {$/;"	f
stages	simulate_blif.h	/^	nnode_t ***stages; \/\/ Stages.$/;"	m	struct:__anon11
stages	simulate_blif.h	/^} stages;$/;"	t	typeref:struct:__anon11
stats	types.h	/^	netlist_stats_t *stats;$/;"	m	struct:netlist_t_t
store	hashtable.h	/^	hashtable_node_t **store;	$/;"	m	struct:hashtable_t_t
store_size	hashtable.h	/^	int store_size;$/;"	m	struct:hashtable_t_t
string	string_cache.h	/^	char **string;$/;"	m	struct:__anon13
string_hash	string_cache.c	/^string_hash(STRING_CACHE * sc,$/;"	f
string_hash	string_cache.h	/^	long *string_hash;$/;"	m	struct:__anon13
string_hash_size	string_cache.h	/^	long string_hash_size;$/;"	m	struct:__anon13
string_to_lower	odin_util.c	/^void string_to_lower(char *string)$/;"	f
string_to_upper	odin_util.c	/^void string_to_upper(char *string)$/;"	f
strings	types.h	/^	char **strings;	$/;"	m	struct:char_list_t_t
symbol	verilog_preprocessor.h	/^	char *symbol;$/;"	m	struct:veri_define
t_memory	memories.h	/^} t_memory;$/;"	t	typeref:struct:s_memory
t_memory_port_sizes	memories.h	/^} t_memory_port_sizes;$/;"	t	typeref:struct:s_memory_port_sizes
t_multiplier	multipliers.h	/^} t_multiplier;$/;"	t	typeref:struct:s_multiplier
tail	queue.h	/^	queue_node_t *tail;$/;"	m	struct:queue_t_t
terminate_continuous_assignment	netlist_create_from_ast.c	/^void terminate_continuous_assignment(ast_node_t *node, signal_list_t* assignment, char *instance_name_prefix)$/;"	f
terminate_registered_assignment	netlist_create_from_ast.c	/^void terminate_registered_assignment(ast_node_t *always_node, signal_list_t* assignment, signal_list_t *potential_clocks, char *instance_name_prefix)$/;"	f
test_vector	simulate_blif.h	/^} test_vector;$/;"	t	typeref:struct:__anon12
to_view_parse	parse_making_ast.c	/^short to_view_parse;$/;"	v
top	verilog_preprocessor.c	/^int top(veri_flag_stack *stack)$/;"	f
top	verilog_preprocessor.h	/^	veri_flag_node *top;$/;"	m	struct:__anon24
top_input_nodes	types.h	/^	nnode_t** top_input_nodes;$/;"	m	struct:netlist_t_t
top_module	netlist_create_from_ast.c	/^ast_node_t *top_module;$/;"	v
top_output_nodes	types.h	/^	nnode_t** top_output_nodes;$/;"	m	struct:netlist_t_t
traverse_visited	types.h	/^	short traverse_visited; \/\/ a way to mark if we've visited yet$/;"	m	struct:nnode_t_t
trim	verilog_preprocessor.c	/^char* trim(char *string)$/;"	f
trim_string	simulate_blif.c	/^void trim_string(char* string, char *chars)$/;"	f
twos_complement	odin_util.c	/^char *twos_complement(char *str)$/;"	f
type	simulate_blif.h	/^	int type;$/;"	m	struct:__anon9
type	types.h	/^	ids type;         \/\/ INPUT or OUTPUT$/;"	m	struct:npin_t_t
type	types.h	/^	ids type;$/;"	m	struct:ast_node_t_t
type	types.h	/^	operation_list type; \/\/ the type of node$/;"	m	struct:nnode_t_t
type	types.h	/^	t_type_ptr type; $/;"	m	struct:netlist_t_t
type_descriptors	odin_ii.c	/^t_type_descriptor* type_descriptors;$/;"	v
type_of_circuit	netlist_create_from_ast.c	/^int type_of_circuit;$/;"	v
types	types.h	/^	} types;$/;"	m	struct:ast_node_t_t	typeref:union:ast_node_t_t::__anon18
undriven_pins	types.h	/^	npin_t **undriven_pins; \/\/ These pins have been found by the simulator to have no driver.$/;"	m	struct:nnode_t_t
unique_count	types.h	/^	int unique_count;$/;"	m	struct:ast_node_t_t
unique_id	types.h	/^	long unique_id;$/;"	m	struct:nnet_t_t
unique_id	types.h	/^	long unique_id;$/;"	m	struct:nnode_t_t
unique_id	types.h	/^	long unique_id;$/;"	m	struct:npin_t_t
unique_label_count	parse_making_ast.c	/^int unique_label_count;$/;"	v
unique_net_data_id	types.h	/^	short unique_net_data_id;$/;"	m	struct:nnet_t_t
unique_node_data_id	types.h	/^	short unique_node_data_id;$/;"	m	struct:nnode_t_t
unique_node_name_id	node_creation_library.c	/^long unique_node_name_id = 0;$/;"	v
unput	verilog_flex.c	180;"	d	file:
update_pin_value	simulate_blif.c	/^void update_pin_value(npin_t *pin, signed char value, int cycle)$/;"	f
update_tag	high_level_data.c	/^void update_tag(ast_node_t *node, int tag, int line)$/;"	f
update_tree	high_level_data.c	/^void update_tree(ast_node_t *node)$/;"	f
update_undriven_input_pins	simulate_blif.c	/^void update_undriven_input_pins(nnode_t *node, int cycle)$/;"	f
vALWAYS	verilog_bison.c	/^     vALWAYS = 261,$/;"	e	enum:yytokentype	file:
vALWAYS	verilog_bison.h	/^     vALWAYS = 261,$/;"	e	enum:yytokentype
vAND	verilog_bison.c	/^     vAND = 262,$/;"	e	enum:yytokentype	file:
vAND	verilog_bison.h	/^     vAND = 262,$/;"	e	enum:yytokentype
vASSIGN	verilog_bison.c	/^     vASSIGN = 263,$/;"	e	enum:yytokentype	file:
vASSIGN	verilog_bison.h	/^     vASSIGN = 263,$/;"	e	enum:yytokentype
vBEGIN	verilog_bison.c	/^     vBEGIN = 264,$/;"	e	enum:yytokentype	file:
vBEGIN	verilog_bison.h	/^     vBEGIN = 264,$/;"	e	enum:yytokentype
vCASE	verilog_bison.c	/^     vCASE = 265,$/;"	e	enum:yytokentype	file:
vCASE	verilog_bison.h	/^     vCASE = 265,$/;"	e	enum:yytokentype
vDEFAULT	verilog_bison.c	/^     vDEFAULT = 266,$/;"	e	enum:yytokentype	file:
vDEFAULT	verilog_bison.h	/^     vDEFAULT = 266,$/;"	e	enum:yytokentype
vDEFINE	verilog_bison.c	/^     vDEFINE = 267,$/;"	e	enum:yytokentype	file:
vDEFINE	verilog_bison.h	/^     vDEFINE = 267,$/;"	e	enum:yytokentype
vDEFPARAM	verilog_bison.c	/^     vDEFPARAM = 288,$/;"	e	enum:yytokentype	file:
vDEFPARAM	verilog_bison.h	/^     vDEFPARAM = 288,$/;"	e	enum:yytokentype
vDELAY_ID	verilog_bison.c	/^     vDELAY_ID = 260,$/;"	e	enum:yytokentype	file:
vDELAY_ID	verilog_bison.h	/^     vDELAY_ID = 260,$/;"	e	enum:yytokentype
vELSE	verilog_bison.c	/^     vELSE = 268,$/;"	e	enum:yytokentype	file:
vELSE	verilog_bison.h	/^     vELSE = 268,$/;"	e	enum:yytokentype
vEND	verilog_bison.c	/^     vEND = 269,$/;"	e	enum:yytokentype	file:
vEND	verilog_bison.h	/^     vEND = 269,$/;"	e	enum:yytokentype
vENDCASE	verilog_bison.c	/^     vENDCASE = 270,$/;"	e	enum:yytokentype	file:
vENDCASE	verilog_bison.h	/^     vENDCASE = 270,$/;"	e	enum:yytokentype
vENDMODULE	verilog_bison.c	/^     vENDMODULE = 271,$/;"	e	enum:yytokentype	file:
vENDMODULE	verilog_bison.h	/^     vENDMODULE = 271,$/;"	e	enum:yytokentype
vIF	verilog_bison.c	/^     vIF = 272,$/;"	e	enum:yytokentype	file:
vIF	verilog_bison.h	/^     vIF = 272,$/;"	e	enum:yytokentype
vINOUT	verilog_bison.c	/^     vINOUT = 273,$/;"	e	enum:yytokentype	file:
vINOUT	verilog_bison.h	/^     vINOUT = 273,$/;"	e	enum:yytokentype
vINPUT	verilog_bison.c	/^     vINPUT = 274,$/;"	e	enum:yytokentype	file:
vINPUT	verilog_bison.h	/^     vINPUT = 274,$/;"	e	enum:yytokentype
vMODULE	verilog_bison.c	/^     vMODULE = 275,$/;"	e	enum:yytokentype	file:
vMODULE	verilog_bison.h	/^     vMODULE = 275,$/;"	e	enum:yytokentype
vNAND	verilog_bison.c	/^     vNAND = 276,$/;"	e	enum:yytokentype	file:
vNAND	verilog_bison.h	/^     vNAND = 276,$/;"	e	enum:yytokentype
vNEGEDGE	verilog_bison.c	/^     vNEGEDGE = 277,$/;"	e	enum:yytokentype	file:
vNEGEDGE	verilog_bison.h	/^     vNEGEDGE = 277,$/;"	e	enum:yytokentype
vNOR	verilog_bison.c	/^     vNOR = 278,$/;"	e	enum:yytokentype	file:
vNOR	verilog_bison.h	/^     vNOR = 278,$/;"	e	enum:yytokentype
vNOT	verilog_bison.c	/^     vNOT = 279,$/;"	e	enum:yytokentype	file:
vNOT	verilog_bison.h	/^     vNOT = 279,$/;"	e	enum:yytokentype
vNOT_SUPPORT	verilog_bison.c	/^     vNOT_SUPPORT = 302,$/;"	e	enum:yytokentype	file:
vNOT_SUPPORT	verilog_bison.h	/^     vNOT_SUPPORT = 302,$/;"	e	enum:yytokentype
vNUMBER_ID	verilog_bison.c	/^     vNUMBER_ID = 259,$/;"	e	enum:yytokentype	file:
vNUMBER_ID	verilog_bison.h	/^     vNUMBER_ID = 259,$/;"	e	enum:yytokentype
vOR	verilog_bison.c	/^     vOR = 280,$/;"	e	enum:yytokentype	file:
vOR	verilog_bison.h	/^     vOR = 280,$/;"	e	enum:yytokentype
vOUTPUT	verilog_bison.c	/^     vOUTPUT = 281,$/;"	e	enum:yytokentype	file:
vOUTPUT	verilog_bison.h	/^     vOUTPUT = 281,$/;"	e	enum:yytokentype
vPARAMETER	verilog_bison.c	/^     vPARAMETER = 282,$/;"	e	enum:yytokentype	file:
vPARAMETER	verilog_bison.h	/^     vPARAMETER = 282,$/;"	e	enum:yytokentype
vPOSEDGE	verilog_bison.c	/^     vPOSEDGE = 283,$/;"	e	enum:yytokentype	file:
vPOSEDGE	verilog_bison.h	/^     vPOSEDGE = 283,$/;"	e	enum:yytokentype
vREG	verilog_bison.c	/^     vREG = 284,$/;"	e	enum:yytokentype	file:
vREG	verilog_bison.h	/^     vREG = 284,$/;"	e	enum:yytokentype
vSYMBOL_ID	verilog_bison.c	/^     vSYMBOL_ID = 258,$/;"	e	enum:yytokentype	file:
vSYMBOL_ID	verilog_bison.h	/^     vSYMBOL_ID = 258,$/;"	e	enum:yytokentype
vWIRE	verilog_bison.c	/^     vWIRE = 285,$/;"	e	enum:yytokentype	file:
vWIRE	verilog_bison.h	/^     vWIRE = 285,$/;"	e	enum:yytokentype
vXNOR	verilog_bison.c	/^     vXNOR = 286,$/;"	e	enum:yytokentype	file:
vXNOR	verilog_bison.h	/^     vXNOR = 286,$/;"	e	enum:yytokentype
vXOR	verilog_bison.c	/^     vXOR = 287,$/;"	e	enum:yytokentype	file:
vXOR	verilog_bison.h	/^     vXOR = 287,$/;"	e	enum:yytokentype
value	types.h	/^			long long value;$/;"	m	struct:ast_node_t_t::__anon18::__anon19
value	types.h	/^	long long value;$/;"	m	struct:info_ast_visit_t_t
value	verilog_preprocessor.h	/^	char *value;$/;"	m	struct:veri_define
values	simulate_blif.h	/^	signed char  **values;$/;"	m	struct:__anon12
values	types.h	/^	signed char *values; \/\/ The values for the current wave.$/;"	m	struct:npin_t_t
values	types.h	/^	signed char values[SIM_WAVE_LENGTH];  \/\/ Stores the values of all connected pins.$/;"	m	struct:nnet_t_t
variable	types.h	/^		} variable;$/;"	m	union:ast_node_t_t::__anon18	typeref:struct:ast_node_t_t::__anon18::__anon21
vcc_node	types.h	/^	nnode_t *vcc_node;$/;"	m	struct:netlist_t_t
vector_value_to_hex	simulate_blif.c	/^char *vector_value_to_hex(signed char *value, int length)$/;"	f
veri_Defines	verilog_preprocessor.h	/^struct veri_Defines $/;"	s
veri_Includes	verilog_preprocessor.h	/^struct veri_Includes $/;"	s
veri_define	verilog_preprocessor.h	/^typedef struct veri_define$/;"	s
veri_define	verilog_preprocessor.h	/^} veri_define;$/;"	t	typeref:struct:veri_define
veri_defines	verilog_preprocessor.c	/^struct veri_Defines veri_defines;$/;"	v	typeref:struct:veri_Defines
veri_flag_node	verilog_preprocessor.h	/^typedef struct veri_flag_node$/;"	s
veri_flag_node	verilog_preprocessor.h	/^} veri_flag_node;$/;"	t	typeref:struct:veri_flag_node
veri_flag_stack	verilog_preprocessor.h	/^} veri_flag_stack;$/;"	t	typeref:struct:__anon24
veri_include	verilog_preprocessor.h	/^typedef struct veri_include$/;"	s
veri_include	verilog_preprocessor.h	/^} veri_include;$/;"	t	typeref:struct:veri_include
veri_includes	verilog_preprocessor.c	/^struct veri_Includes veri_includes;$/;"	v	typeref:struct:veri_Includes
veri_is_defined	verilog_preprocessor.c	/^int veri_is_defined(char * symbol)$/;"	f
veri_preproc	verilog_preprocessor.c	/^FILE* veri_preproc(FILE *source)$/;"	f
veri_preproc_bootstraped	verilog_preprocessor.c	/^void veri_preproc_bootstraped(FILE *original_source, FILE *preproc_producer, veri_include *current_include)$/;"	f
verify_hard_block_ports_against_model	read_blif.c	/^int verify_hard_block_ports_against_model(hard_block_ports *ports, hard_block_model *model)$/;"	f
verify_lines	simulate_blif.c	/^int verify_lines (lines_t *l)$/;"	f
verify_output_vectors	simulate_blif.c	/^int verify_output_vectors(char* output_vector_file, int num_vectors)$/;"	f
verify_test_vector_headers	simulate_blif.c	/^int verify_test_vector_headers(FILE *in, lines_t *l)$/;"	f
verilog_file	types.h	/^	char *verilog_file;$/;"	m	struct:global_args_t_t
verilog_netlist	netlist_create_from_ast.c	/^netlist_t *verilog_netlist;$/;"	v
verilog_preprocessor_h	verilog_preprocessor.h	2;"	d
voANDAND	verilog_bison.c	/^     voANDAND = 289,$/;"	e	enum:yytokentype	file:
voANDAND	verilog_bison.h	/^     voANDAND = 289,$/;"	e	enum:yytokentype
voCASEEQUAL	verilog_bison.c	/^     voCASEEQUAL = 297,$/;"	e	enum:yytokentype	file:
voCASEEQUAL	verilog_bison.h	/^     voCASEEQUAL = 297,$/;"	e	enum:yytokentype
voCASENOTEQUAL	verilog_bison.c	/^     voCASENOTEQUAL = 298,$/;"	e	enum:yytokentype	file:
voCASENOTEQUAL	verilog_bison.h	/^     voCASENOTEQUAL = 298,$/;"	e	enum:yytokentype
voEQUAL	verilog_bison.c	/^     voEQUAL = 295,$/;"	e	enum:yytokentype	file:
voEQUAL	verilog_bison.h	/^     voEQUAL = 295,$/;"	e	enum:yytokentype
voGTE	verilog_bison.c	/^     voGTE = 292,$/;"	e	enum:yytokentype	file:
voGTE	verilog_bison.h	/^     voGTE = 292,$/;"	e	enum:yytokentype
voLTE	verilog_bison.c	/^     voLTE = 291,$/;"	e	enum:yytokentype	file:
voLTE	verilog_bison.h	/^     voLTE = 291,$/;"	e	enum:yytokentype
voNAND	verilog_bison.c	/^     voNAND = 300,$/;"	e	enum:yytokentype	file:
voNAND	verilog_bison.h	/^     voNAND = 300,$/;"	e	enum:yytokentype
voNOR	verilog_bison.c	/^     voNOR = 301,$/;"	e	enum:yytokentype	file:
voNOR	verilog_bison.h	/^     voNOR = 301,$/;"	e	enum:yytokentype
voNOTEQUAL	verilog_bison.c	/^     voNOTEQUAL = 296,$/;"	e	enum:yytokentype	file:
voNOTEQUAL	verilog_bison.h	/^     voNOTEQUAL = 296,$/;"	e	enum:yytokentype
voOROR	verilog_bison.c	/^     voOROR = 290,$/;"	e	enum:yytokentype	file:
voOROR	verilog_bison.h	/^     voOROR = 290,$/;"	e	enum:yytokentype
voSLEFT	verilog_bison.c	/^     voSLEFT = 293,$/;"	e	enum:yytokentype	file:
voSLEFT	verilog_bison.h	/^     voSLEFT = 293,$/;"	e	enum:yytokentype
voSRIGHT	verilog_bison.c	/^     voSRIGHT = 294,$/;"	e	enum:yytokentype	file:
voSRIGHT	verilog_bison.h	/^     voSRIGHT = 294,$/;"	e	enum:yytokentype
voXNOR	verilog_bison.c	/^     voXNOR = 299,$/;"	e	enum:yytokentype	file:
voXNOR	verilog_bison.h	/^     voXNOR = 299,$/;"	e	enum:yytokentype
wall_time	simulate_blif.c	/^inline double wall_time()$/;"	f
warning_message	errors.c	/^void warning_message(short error_type, int line_number, int file, char *message, ...)$/;"	f
we	memories.h	/^	npin_t *we;$/;"	m	struct:__anon2
we1	memories.h	/^	npin_t *we1;$/;"	m	struct:__anon3
we2	memories.h	/^	npin_t *we2;$/;"	m	struct:__anon3
write_vector_headers	simulate_blif.c	/^void write_vector_headers(FILE *file, lines_t *l)$/;"	f
write_vector_to_file	simulate_blif.c	/^void write_vector_to_file(lines_t *l, FILE *file, int cycle)$/;"	f
write_vector_to_modelsim_file	simulate_blif.c	/^void write_vector_to_modelsim_file(lines_t *l, FILE *modelsim_out, int cycle)$/;"	f
write_wave_to_file	simulate_blif.c	/^void write_wave_to_file(lines_t *l, FILE* file, int cycle_offset, int wave_length, int edge)$/;"	f
write_wave_to_modelsim_file	simulate_blif.c	/^void write_wave_to_modelsim_file(netlist_t *netlist, lines_t *l, FILE* modelsim_out, int cycle_offset, int wave_length)$/;"	f
yy_accept	verilog_flex.c	/^static yyconst flex_int16_t yy_accept[280] =$/;"	v	file:
yy_at_bol	verilog_flex.c	/^	int yy_at_bol;$/;"	m	struct:yy_buffer_state	file:
yy_base	verilog_flex.c	/^static yyconst flex_int16_t yy_base[288] =$/;"	v	file:
yy_bs_column	verilog_flex.c	/^    int yy_bs_column; \/**< The column count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_bs_lineno	verilog_flex.c	/^    int yy_bs_lineno; \/**< The line count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_pos	verilog_flex.c	/^	char *yy_buf_pos;		\/* current position in input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_size	verilog_flex.c	/^	yy_size_t yy_buf_size;$/;"	m	struct:yy_buffer_state	file:
yy_buffer_stack	verilog_flex.c	/^static YY_BUFFER_STATE * yy_buffer_stack = 0; \/**< Stack as an array. *\/$/;"	v	file:
yy_buffer_stack_max	verilog_flex.c	/^static size_t yy_buffer_stack_max = 0; \/**< capacity of stack. *\/$/;"	v	file:
yy_buffer_stack_top	verilog_flex.c	/^static size_t yy_buffer_stack_top = 0; \/**< index of top of stack. *\/$/;"	v	file:
yy_buffer_state	verilog_flex.c	/^struct yy_buffer_state$/;"	s	file:
yy_buffer_status	verilog_flex.c	/^	int yy_buffer_status;$/;"	m	struct:yy_buffer_state	file:
yy_c_buf_p	verilog_flex.c	/^static char *yy_c_buf_p = (char *) 0;$/;"	v	file:
yy_ch_buf	verilog_flex.c	/^	char *yy_ch_buf;		\/* input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_chk	verilog_flex.c	/^static yyconst flex_int16_t yy_chk[402] =$/;"	v	file:
yy_create_buffer	verilog_flex.c	/^    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )$/;"	f
yy_def	verilog_flex.c	/^static yyconst flex_int16_t yy_def[288] =$/;"	v	file:
yy_delete_buffer	verilog_flex.c	/^    void yy_delete_buffer (YY_BUFFER_STATE  b )$/;"	f
yy_did_buffer_switch_on_eof	verilog_flex.c	/^static int yy_did_buffer_switch_on_eof;$/;"	v	file:
yy_ec	verilog_flex.c	/^static yyconst flex_int32_t yy_ec[256] =$/;"	v	file:
yy_fatal_error	verilog_flex.c	/^static void yy_fatal_error (yyconst char* msg )$/;"	f	file:
yy_fill_buffer	verilog_flex.c	/^	int yy_fill_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_flex_debug	verilog_flex.c	/^int yy_flex_debug = 0;$/;"	v
yy_flex_strlen	verilog_flex.c	/^static int yy_flex_strlen (yyconst char * s )$/;"	f	file:
yy_flex_strncpy	verilog_flex.c	/^static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )$/;"	f	file:
yy_flush_buffer	verilog_flex.c	/^    void yy_flush_buffer (YY_BUFFER_STATE  b )$/;"	f
yy_get_next_buffer	verilog_flex.c	/^static int yy_get_next_buffer (void)$/;"	f	file:
yy_get_previous_state	verilog_flex.c	/^    static yy_state_type yy_get_previous_state (void)$/;"	f	file:
yy_hold_char	verilog_flex.c	/^static char yy_hold_char;$/;"	v	file:
yy_init	verilog_flex.c	/^static int yy_init = 0;		\/* whether we need to initialize *\/$/;"	v	file:
yy_init_buffer	verilog_flex.c	/^    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )$/;"	f	file:
yy_init_globals	verilog_flex.c	/^static int yy_init_globals (void)$/;"	f	file:
yy_input_file	verilog_flex.c	/^	FILE *yy_input_file;$/;"	m	struct:yy_buffer_state	file:
yy_is_interactive	verilog_flex.c	/^	int yy_is_interactive;$/;"	m	struct:yy_buffer_state	file:
yy_is_our_buffer	verilog_flex.c	/^	int yy_is_our_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_last_accepting_cpos	verilog_flex.c	/^static char *yy_last_accepting_cpos;$/;"	v	file:
yy_last_accepting_state	verilog_flex.c	/^static yy_state_type yy_last_accepting_state;$/;"	v	file:
yy_load_buffer_state	verilog_flex.c	/^static void yy_load_buffer_state  (void)$/;"	f	file:
yy_meta	verilog_flex.c	/^static yyconst flex_int32_t yy_meta[47] =$/;"	v	file:
yy_n_chars	verilog_flex.c	/^	int yy_n_chars;$/;"	m	struct:yy_buffer_state	file:
yy_n_chars	verilog_flex.c	/^static int yy_n_chars;		\/* number of characters read into yy_ch_buf *\/$/;"	v	file:
yy_new_buffer	verilog_flex.c	309;"	d	file:
yy_nxt	verilog_flex.c	/^	flex_int32_t yy_nxt;$/;"	m	struct:yy_trans_info	file:
yy_nxt	verilog_flex.c	/^static yyconst flex_int16_t yy_nxt[402] =$/;"	v	file:
yy_reduce_print	verilog_bison.c	/^yy_reduce_print (YYSTYPE *yyvsp, int yyrule)$/;"	f	file:
yy_scan_buffer	verilog_flex.c	/^YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )$/;"	f
yy_scan_bytes	verilog_flex.c	/^YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )$/;"	f
yy_scan_string	verilog_flex.c	/^YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )$/;"	f
yy_set_bol	verilog_flex.c	321;"	d	file:
yy_set_interactive	verilog_flex.c	311;"	d	file:
yy_size_t	verilog_flex.c	/^typedef size_t yy_size_t;$/;"	t	file:
yy_stack_print	verilog_bison.c	/^yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)$/;"	f	file:
yy_start	verilog_flex.c	/^static int yy_start = 0;	\/* start state number *\/$/;"	v	file:
yy_state_type	verilog_flex.c	/^typedef int yy_state_type;$/;"	t	file:
yy_switch_to_buffer	verilog_flex.c	/^    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )$/;"	f
yy_symbol_print	verilog_bison.c	/^yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	file:
yy_symbol_value_print	verilog_bison.c	/^yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	file:
yy_trans_info	verilog_flex.c	/^struct yy_trans_info$/;"	s	file:
yy_try_NUL_trans	verilog_flex.c	/^    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )$/;"	f	file:
yy_verify	verilog_flex.c	/^	flex_int32_t yy_verify;$/;"	m	struct:yy_trans_info	file:
yyalloc	verilog_bison.c	/^union yyalloc$/;"	u	file:
yyalloc	verilog_flex.c	/^void *yyalloc (yy_size_t  size )$/;"	f
yychar	verilog_bison.c	/^int yychar;$/;"	v
yycheck	verilog_bison.c	/^static const yytype_int16 yycheck[] =$/;"	v	file:
yyclearin	verilog_bison.c	1116;"	d	file:
yyconst	verilog_flex.c	106;"	d	file:
yyconst	verilog_flex.c	108;"	d	file:
yydebug	verilog_bison.c	/^int yydebug;$/;"	v
yydefact	verilog_bison.c	/^static const yytype_uint8 yydefact[] =$/;"	v	file:
yydefgoto	verilog_bison.c	/^static const yytype_int16 yydefgoto[] =$/;"	v	file:
yydestruct	verilog_bison.c	/^yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)$/;"	f	file:
yyensure_buffer_stack	verilog_flex.c	/^static void yyensure_buffer_stack (void)$/;"	f	file:
yyerrok	verilog_bison.c	1115;"	d	file:
yyerror	verilog_bison.c	/^void yyerror(const char *str)$/;"	f
yyfree	verilog_flex.c	/^void yyfree (void * ptr )$/;"	f
yyget_debug	verilog_flex.c	/^int yyget_debug  (void)$/;"	f
yyget_in	verilog_flex.c	/^FILE *yyget_in  (void)$/;"	f
yyget_leng	verilog_flex.c	/^int yyget_leng  (void)$/;"	f
yyget_lineno	verilog_flex.c	/^int yyget_lineno  (void)$/;"	f
yyget_out	verilog_flex.c	/^FILE *yyget_out  (void)$/;"	f
yyget_text	verilog_flex.c	/^char *yyget_text  (void)$/;"	f
yyin	verilog_flex.c	/^FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;$/;"	v
yyinput	verilog_flex.c	/^    static int yyinput (void)$/;"	f	file:
yyleng	verilog_flex.c	/^int yyleng;$/;"	v
yyless	verilog_flex.c	167;"	d	file:
yyless	verilog_flex.c	2137;"	d	file:
yyless	verilog_flex.c	2138;"	d	file:
yylex_destroy	verilog_flex.c	/^int yylex_destroy  (void)$/;"	f
yylineno	verilog_bison.c	/^int yylineno;$/;"	v
yylineno	verilog_flex.c	/^int yylineno = 1;$/;"	v
yylval	verilog_bison.c	/^YYSTYPE yylval;$/;"	v
yymore	verilog_flex.c	625;"	d	file:
yynerrs	verilog_bison.c	/^int yynerrs;$/;"	v
yyout	verilog_flex.c	/^FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;$/;"	v
yypact	verilog_bison.c	/^static const yytype_int16 yypact[] =$/;"	v	file:
yyparse	verilog_bison.c	/^yyparse (void *YYPARSE_PARAM)$/;"	f
yypgoto	verilog_bison.c	/^static const yytype_int16 yypgoto[] =$/;"	v	file:
yypop_buffer_state	verilog_flex.c	/^void yypop_buffer_state (void)$/;"	f
yyprhs	verilog_bison.c	/^static const yytype_uint16 yyprhs[] =$/;"	v	file:
yypush_buffer_state	verilog_flex.c	/^void yypush_buffer_state (YY_BUFFER_STATE new_buffer )$/;"	f
yyr1	verilog_bison.c	/^static const yytype_uint8 yyr1[] =$/;"	v	file:
yyr2	verilog_bison.c	/^static const yytype_uint8 yyr2[] =$/;"	v	file:
yyrealloc	verilog_flex.c	/^void *yyrealloc  (void * ptr, yy_size_t  size )$/;"	f
yyrestart	verilog_flex.c	/^    void yyrestart  (FILE * input_file )$/;"	f
yyrhs	verilog_bison.c	/^static const yytype_int8 yyrhs[] =$/;"	v	file:
yyrline	verilog_bison.c	/^static const yytype_uint16 yyrline[] =$/;"	v	file:
yyset_debug	verilog_flex.c	/^void yyset_debug (int  bdebug )$/;"	f
yyset_in	verilog_flex.c	/^void yyset_in (FILE *  in_str )$/;"	f
yyset_lineno	verilog_flex.c	/^void yyset_lineno (int  line_number )$/;"	f
yyset_out	verilog_flex.c	/^void yyset_out (FILE *  out_str )$/;"	f
yyss_alloc	verilog_bison.c	/^  yytype_int16 yyss_alloc;$/;"	m	union:yyalloc	file:
yystos	verilog_bison.c	/^static const yytype_uint8 yystos[] =$/;"	v	file:
yystpcpy	verilog_bison.c	/^yystpcpy (char *yydest, const char *yysrc)$/;"	f	file:
yystpcpy	verilog_bison.c	1423;"	d	file:
yystrlen	verilog_bison.c	/^yystrlen (const char *yystr)$/;"	f	file:
yystrlen	verilog_bison.c	1400;"	d	file:
yystype	verilog_bison.c	237;"	d	file:
yystype	verilog_bison.h	119;"	d
yysyntax_error	verilog_bison.c	/^yysyntax_error (char *yyresult, int yystate, int yychar)$/;"	f	file:
yytable	verilog_bison.c	/^static const yytype_uint16 yytable[] =$/;"	v	file:
yyterminate	verilog_flex.c	799;"	d	file:
yytext	verilog_flex.c	/^char *yytext;$/;"	v
yytext_ptr	verilog_flex.c	346;"	d	file:
yytname	verilog_bison.c	/^static const char *const yytname[] =$/;"	v	file:
yytnamerr	verilog_bison.c	/^yytnamerr (char *yyres, const char *yystr)$/;"	f	file:
yytokentype	verilog_bison.c	/^   enum yytokentype {$/;"	g	file:
yytokentype	verilog_bison.h	/^   enum yytokentype {$/;"	g
yytoknum	verilog_bison.c	/^static const yytype_uint16 yytoknum[] =$/;"	v	file:
yytranslate	verilog_bison.c	/^static const yytype_uint8 yytranslate[] =$/;"	v	file:
yytype_int16	verilog_bison.c	/^typedef YYTYPE_INT16 yytype_int16;$/;"	t	file:
yytype_int16	verilog_bison.c	/^typedef short int yytype_int16;$/;"	t	file:
yytype_int8	verilog_bison.c	/^typedef YYTYPE_INT8 yytype_int8;$/;"	t	file:
yytype_int8	verilog_bison.c	/^typedef short int yytype_int8;$/;"	t	file:
yytype_int8	verilog_bison.c	/^typedef signed char yytype_int8;$/;"	t	file:
yytype_uint16	verilog_bison.c	/^typedef YYTYPE_UINT16 yytype_uint16;$/;"	t	file:
yytype_uint16	verilog_bison.c	/^typedef unsigned short int yytype_uint16;$/;"	t	file:
yytype_uint8	verilog_bison.c	/^typedef YYTYPE_UINT8 yytype_uint8;$/;"	t	file:
yytype_uint8	verilog_bison.c	/^typedef unsigned char yytype_uint8;$/;"	t	file:
yyunput	verilog_flex.c	/^    static void yyunput (int c, register char * yy_bp )$/;"	f	file:
yyvs_alloc	verilog_bison.c	/^  YYSTYPE yyvs_alloc;$/;"	m	union:yyalloc	file:
yywrap	verilog_bison.c	/^int yywrap()$/;"	f
zero_net	types.h	/^	nnet_t *zero_net;$/;"	m	struct:netlist_t_t
zero_string	netlist_create_from_ast.c	/^char *zero_string = "ZERO_GND_ZERO";$/;"	v
